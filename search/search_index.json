{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introdu\u00e7\u00e3o \u00e0 Programa\u00e7\u00e3o Orientada a Objetos com Python","text":"<p>A Programa\u00e7\u00e3o Orientada a Objetos (POO) \u00e9 um dos paradigmas mais poderosos e amplamente utilizados no desenvolvimento de software moderno. Em Python, a POO \u00e9 implementada de forma simples, por\u00e9m flex\u00edvel, permitindo desde a cria\u00e7\u00e3o de sistemas simples at\u00e9 arquiteturas robustas e extens\u00edveis.</p>"},{"location":"#o-que-e-programacao-orientada-a-objetos","title":"O que \u00e9 Programa\u00e7\u00e3o Orientada a Objetos?","text":"<p>A POO \u00e9 um modelo de programa\u00e7\u00e3o que organiza o c\u00f3digo em objetos, que s\u00e3o inst\u00e2ncias de classes. Esses objetos encapsulam dados (atributos) e comportamentos (m\u00e9todos), permitindo modelar sistemas de maneira mais pr\u00f3xima da realidade e mais f\u00e1cil de manter.</p>"},{"location":"#principios-fundamentais-da-poo","title":"Princ\u00edpios Fundamentais da POO","text":"<ul> <li>Encapsulamento</li> <li> <p>Protege os dados internos do objeto, expondo apenas o necess\u00e1rio.</p> </li> <li> <p>Heran\u00e7a</p> </li> <li> <p>Permite que uma classe herde atributos e m\u00e9todos de outra, promovendo reutiliza\u00e7\u00e3o.</p> </li> <li> <p>Polimorfismo</p> </li> <li> <p>Objetos de diferentes classes podem ser tratados de forma uniforme se compartilharem a mesma interface.</p> </li> <li> <p>Abstra\u00e7\u00e3o</p> </li> <li>Esconde os detalhes internos e mostra apenas o necess\u00e1rio para o uso de um objeto.</li> </ul> <p><pre><code>    class Pessoa:\n    def __init__(self, nome, idade):\n        self.nome = nome\n        self.idade = idade\n\n    def apresentar(self):\n        print(f\"Ol\u00e1, meu nome \u00e9 {self.nome} e tenho {self.idade} anos.\")\n\n    # Criando um objeto\n    p1 = Pessoa(\"Ana\", 30)\n    p1.apresentar()\n</code></pre> - Este exemplo mostra:</p> <ul> <li> <p>Cria\u00e7\u00e3o de uma classe</p> </li> <li> <p>Uso do m\u00e9todo construtor init</p> </li> <li> <p>Defini\u00e7\u00e3o e acesso a atributos</p> </li> <li> <p>Invoca\u00e7\u00e3o de um m\u00e9todo de inst\u00e2ncia</p> </li> </ul>"},{"location":"#para-quem-e-iniciante","title":"Para quem \u00e9 iniciante","text":"<p>Se voc\u00ea est\u00e1 come\u00e7ando, o mais importante \u00e9 entender:</p> <ul> <li> <p>Como definir e instanciar classes</p> </li> <li> <p>Como criar m\u00e9todos e acessar atributos</p> </li> <li> <p>Como usar o self, que referencia o pr\u00f3prio objeto</p> </li> </ul> <p>Com o tempo, explore os conceitos de heran\u00e7a, classes abstratas (via abc), m\u00e9todos est\u00e1ticos e de classe, e boas pr\u00e1ticas como o uso de properties.</p>"},{"location":"#para-quem-ja-e-avancado","title":"Para quem j\u00e1 \u00e9 avan\u00e7ado","text":"<p>Python oferece mecanismos mais sofisticados, como:</p> <ul> <li> <p>Mixins para composi\u00e7\u00e3o flex\u00edvel</p> </li> <li> <p>Metaclasses, para controlar a cria\u00e7\u00e3o de classes</p> </li> <li> <p>Protocolos (com typing.Protocol) para polimorfismo estrutural</p> </li> <li> <p>Decoradores de classe e m\u00e9todos, para metaprograma\u00e7\u00e3o</p> </li> <li> <p>Dunder methods (_str, _repr, _eq_, etc.) para integra\u00e7\u00e3o com o ecossistema Python</p> </li> </ul> <p>Tamb\u00e9m \u00e9 poss\u00edvel integrar POO com outros paradigmas (como funcional ou procedural), e isso \u00e9 especialmente comum em frameworks como Django, que usa fortemente heran\u00e7a, composi\u00e7\u00e3o e abstra\u00e7\u00e3o.</p>"},{"location":"#conclusao","title":"Conclus\u00e3o","text":"<p>A POO com Python \u00e9 tanto uma porta de entrada para iniciantes quanto uma ferramenta poderosa para desenvolvedores experientes. Entender seus fundamentos permite escrever c\u00f3digo mais organizado, reutiliz\u00e1vel e escal\u00e1vel \u2014 caracter\u00edsticas essenciais para qualquer projeto de software.</p> <p>Aprofunde-se com calma, escreva muitos exemplos, e observe como o paradigma orientado a objetos pode transformar a forma como voc\u00ea pensa e estrutura seus programas.</p>"},{"location":"about/","title":"Sobre","text":"<p>Profissional com experi\u00eancia em desenvolvimento backend, especializado em Django, Django Rest Framework e FastAPI para constru\u00e7\u00e3o de APIs escal\u00e1veis e eficientes. Tenho conhecimento s\u00f3lido em orquestra\u00e7\u00e3o de cont\u00eaineres com Docker, filas ass\u00edncronas com Celery + Redis e comunica\u00e7\u00e3o em tempo real com WebSockets.</p> <p>Ao longo da minha trajet\u00f3ria, trabalhei em projetos envolvendo integra\u00e7\u00e3o de sistemas, automa\u00e7\u00e3o de processos e gera\u00e7\u00e3o de relat\u00f3rios utilizando SQL e Pandas. Al\u00e9m disso, tenho conhecimento em Vue.js, JavaScript e Bootstrap, permitindo colabora\u00e7\u00e3o com equipes frontend.</p> <p>Atualmente, estou aprofundando meus estudos em machine learning, an\u00e1lise de dados e otimiza\u00e7\u00e3o de consultas SQL para ampliar meu impacto na \u00e1rea de tecnologia. Tamb\u00e9m sou criador do zeconfig(https://github.com/uadson/zeconfig.git), um projeto open source para gerenciamento de configura\u00e7\u00f5es, dispon\u00edvel no GitHub.</p> <p>\ud83d\udccc Principais Tecnologias:</p> <ul> <li>\u2705 Backend: Python | Django | Django Rest Framework | FastAPI</li> <li>\u2705 Banco de Dados: PostgreSQL | SQL | Redis</li> <li>\u2705 Infraestrutura: Docker | Nginx | Celery | Kubernetes</li> <li>\u2705 Desenvolvimento Frontend: Vue.js (estudando) | JavaScript | Bootstrap</li> <li>\u2705 Outros: WebSockets | APIs REST | Arquitetura de Microsservi\u00e7os | PLN (estudando) LangChain (estudando)</li> </ul>"},{"location":"content/modules/1/classes_e_objetos/","title":"Classes e Objetos","text":""},{"location":"content/modules/1/classes_e_objetos/#conceitos-fundamentais","title":"Conceitos Fundamentais:","text":"<ul> <li>Classe: Um blueprint ou molde para criar objetos. Define as caracter\u00edsticas (atributos) e os comportamentos (m\u00e9todos) que os objetos ter\u00e3o.</li> <li>Objeto (ou Inst\u00e2ncia): Uma ocorr\u00eancia concreta de uma classe. Cada objeto \u00e9 \u00fanico, mas segue a estrutura da classe.</li> <li>Atributo: Uma vari\u00e1vel associada a uma classe ou objeto, que armazena dados.<ul> <li>Atributo de Inst\u00e2ncia: Pertence a uma inst\u00e2ncia espec\u00edfica do objeto.</li> <li>Atributo de Classe: Pertence \u00e0 classe e \u00e9 compartilhado por todas as inst\u00e2ncias.</li> </ul> </li> <li>M\u00e9todo: Uma fun\u00e7\u00e3o associada a uma classe ou objeto, que define um comportamento.<ul> <li>M\u00e9todo de Inst\u00e2ncia: Opera sobre os dados da inst\u00e2ncia.</li> <li>M\u00e9todo de Classe (@classmethod): Opera sobre a classe e seus atributos de classe.</li> <li>M\u00e9todo Est\u00e1tico (@staticmethod): N\u00e3o opera sobre a inst\u00e2ncia nem sobre a classe; \u00e9 uma fun\u00e7\u00e3o utilit\u00e1ria dentro do escopo da classe.</li> </ul> </li> </ul>"},{"location":"content/modules/1/classes_e_objetos/#conteudo.modulo_1.classes_e_objetos.MinhaClasse","title":"<code>MinhaClasse</code>","text":"<p>Um blueprint ou molde para criar objetos. Define as caracter\u00edsticas (atributos) e os comportamentos (m\u00e9todos) que os objetos podem ter.</p> Source code in <code>conteudo/modulo_1/classes_e_objetos.py</code> <pre><code>class MinhaClasse:\n    \"\"\"\n    Um blueprint ou molde para criar objetos.\n    Define as caracter\u00edsticas (atributos) e os\n    comportamentos (m\u00e9todos) que os objetos podem ter.\n    \"\"\"\n\n    # Atributos de classe\n    atributo_de_classe = 'Este \u00e9 um atributo de classe'\n\n    def __init__(self, atributo_de_instancia):\n        \"\"\"\n        M\u00e9todo construtor que inicializa os atributos de inst\u00e2ncia.\n\n        Args:\n\n            self: Refer\u00eancia \u00e0 inst\u00e2ncia atual.\n            atributo_de_instancia (str): Um atributo espec\u00edfico para cada inst\u00e2ncia.\n        \"\"\"\n        self.atributo_de_instancia = atributo_de_instancia\n\n    def metodo_de_instancia(self):\n        \"\"\"\n        M\u00e9todo que pode ser chamado em uma inst\u00e2ncia da classe.\n\n        Args:\n\n            self: Refer\u00eancia \u00e0 inst\u00e2ncia atual.\n\n        Returns:\n\n            value (str): Uma string representando o comportamento do m\u00e9todo.\n        \"\"\"\n        return f'Este \u00e9 um m\u00e9todo de inst\u00e2ncia. Atributo de inst\u00e2ncia: {self.atributo_de_instancia}'\n\n    @classmethod\n    def metodo_de_classe(cls):\n        \"\"\"\n        M\u00e9todo de classe que pode ser chamado na classe, n\u00e3o em uma inst\u00e2ncia.\n\n        Args:\n\n            cls: Refer\u00eancia \u00e0 classe atual.\n\n        Returns:\n\n            value (str): Uma string representando o comportamento do m\u00e9todo de classe.\n        \"\"\"\n        return f'Este \u00e9 um m\u00e9todo de classe. Atributo de classe: {cls.atributo_de_classe}'\n\n    @staticmethod\n    def metodo_estatico():\n        \"\"\"\n        M\u00e9todo est\u00e1tico que n\u00e3o depende de inst\u00e2ncia ou classe.\n\n        Returns:\n\n            value (str): Uma string representando o comportamento do m\u00e9todo est\u00e1tico.\n        \"\"\"\n        return 'Este \u00e9 um m\u00e9todo est\u00e1tico. N\u00e3o depende de inst\u00e2ncia ou classe.'\n</code></pre>"},{"location":"content/modules/1/classes_e_objetos/#conteudo.modulo_1.classes_e_objetos.MinhaClasse.__init__","title":"<code>__init__(atributo_de_instancia)</code>","text":"<p>M\u00e9todo construtor que inicializa os atributos de inst\u00e2ncia.</p> <p>Args:</p> <pre><code>self: Refer\u00eancia \u00e0 inst\u00e2ncia atual.\natributo_de_instancia (str): Um atributo espec\u00edfico para cada inst\u00e2ncia.\n</code></pre> Source code in <code>conteudo/modulo_1/classes_e_objetos.py</code> <pre><code>def __init__(self, atributo_de_instancia):\n    \"\"\"\n    M\u00e9todo construtor que inicializa os atributos de inst\u00e2ncia.\n\n    Args:\n\n        self: Refer\u00eancia \u00e0 inst\u00e2ncia atual.\n        atributo_de_instancia (str): Um atributo espec\u00edfico para cada inst\u00e2ncia.\n    \"\"\"\n    self.atributo_de_instancia = atributo_de_instancia\n</code></pre>"},{"location":"content/modules/1/classes_e_objetos/#conteudo.modulo_1.classes_e_objetos.MinhaClasse.metodo_de_classe","title":"<code>metodo_de_classe()</code>  <code>classmethod</code>","text":"<p>M\u00e9todo de classe que pode ser chamado na classe, n\u00e3o em uma inst\u00e2ncia.</p> <p>Args:</p> <pre><code>cls: Refer\u00eancia \u00e0 classe atual.\n</code></pre> <p>Returns:</p> <pre><code>value (str): Uma string representando o comportamento do m\u00e9todo de classe.\n</code></pre> Source code in <code>conteudo/modulo_1/classes_e_objetos.py</code> <pre><code>@classmethod\ndef metodo_de_classe(cls):\n    \"\"\"\n    M\u00e9todo de classe que pode ser chamado na classe, n\u00e3o em uma inst\u00e2ncia.\n\n    Args:\n\n        cls: Refer\u00eancia \u00e0 classe atual.\n\n    Returns:\n\n        value (str): Uma string representando o comportamento do m\u00e9todo de classe.\n    \"\"\"\n    return f'Este \u00e9 um m\u00e9todo de classe. Atributo de classe: {cls.atributo_de_classe}'\n</code></pre>"},{"location":"content/modules/1/classes_e_objetos/#conteudo.modulo_1.classes_e_objetos.MinhaClasse.metodo_de_instancia","title":"<code>metodo_de_instancia()</code>","text":"<p>M\u00e9todo que pode ser chamado em uma inst\u00e2ncia da classe.</p> <p>Args:</p> <pre><code>self: Refer\u00eancia \u00e0 inst\u00e2ncia atual.\n</code></pre> <p>Returns:</p> <pre><code>value (str): Uma string representando o comportamento do m\u00e9todo.\n</code></pre> Source code in <code>conteudo/modulo_1/classes_e_objetos.py</code> <pre><code>def metodo_de_instancia(self):\n    \"\"\"\n    M\u00e9todo que pode ser chamado em uma inst\u00e2ncia da classe.\n\n    Args:\n\n        self: Refer\u00eancia \u00e0 inst\u00e2ncia atual.\n\n    Returns:\n\n        value (str): Uma string representando o comportamento do m\u00e9todo.\n    \"\"\"\n    return f'Este \u00e9 um m\u00e9todo de inst\u00e2ncia. Atributo de inst\u00e2ncia: {self.atributo_de_instancia}'\n</code></pre>"},{"location":"content/modules/1/classes_e_objetos/#conteudo.modulo_1.classes_e_objetos.MinhaClasse.metodo_estatico","title":"<code>metodo_estatico()</code>  <code>staticmethod</code>","text":"<p>M\u00e9todo est\u00e1tico que n\u00e3o depende de inst\u00e2ncia ou classe.</p> <p>Returns:</p> <pre><code>value (str): Uma string representando o comportamento do m\u00e9todo est\u00e1tico.\n</code></pre> Source code in <code>conteudo/modulo_1/classes_e_objetos.py</code> <pre><code>@staticmethod\ndef metodo_estatico():\n    \"\"\"\n    M\u00e9todo est\u00e1tico que n\u00e3o depende de inst\u00e2ncia ou classe.\n\n    Returns:\n\n        value (str): Uma string representando o comportamento do m\u00e9todo est\u00e1tico.\n    \"\"\"\n    return 'Este \u00e9 um m\u00e9todo est\u00e1tico. N\u00e3o depende de inst\u00e2ncia ou classe.'\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/","title":"Composi\u00e7\u00e3o e Rela\u00e7\u00f5es entre Objetos","text":""},{"location":"content/modules/1/composicao_relacao/#conceitos-fundamentais","title":"Conceitos Fundamentais:","text":"<ul> <li>Composi\u00e7\u00e3o: Uma classe cont\u00e9m inst\u00e2ncias de outras classes como seus atributos. Modela a rela\u00e7\u00e3o \"tem um\".</li> <li>Agrega\u00e7\u00e3o: Um tipo mais fraco de composi\u00e7\u00e3o, onde os objetos componentes podem existir independentemente do objeto que os cont\u00e9m.</li> <li>Vantagens da Composi\u00e7\u00e3o sobre Heran\u00e7a:<ul> <li>Maior flexibilidade: permite mudan\u00e7as na composi\u00e7\u00e3o em tempo de execu\u00e7\u00e3o.</li> <li>Menor acoplamento: as classes n\u00e3o est\u00e3o t\u00e3o rigidamente ligadas.</li> <li>Maior reutiliza\u00e7\u00e3o de c\u00f3digo: um componente pode ser reutilizado em v\u00e1rias classes.</li> <li>Evita o \"problema do diamante\" da heran\u00e7a m\u00faltipla.</li> </ul> </li> </ul>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Biblioteca","title":"<code>Biblioteca</code>","text":"Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>class Biblioteca:\n    def __init__(self, nome):\n        \"\"\"\n        Inicializa a biblioteca com um nome.\n\n        Args:\n\n            nome (str): O nome da biblioteca.\n        \"\"\"\n        self.nome = nome\n        self.livros = []  # Livros podem existir independentemente da biblioteca\n\n    def adicionar_livro(self, livro):\n        \"\"\"\n        Adiciona um livro \u00e0 biblioteca.\n\n        Args:\n\n            livro (str): O t\u00edtulo do livro a ser adicionado.\n        \"\"\"\n        self.livros.append(livro)\n\n    def listar_livros(self):\n        \"\"\"\n        Lista todos os livros na biblioteca.\n\n        Returns:\n\n            value (list): Lista de livros na biblioteca.\n        \"\"\"\n        return f'Livros na biblioteca {self.nome}: {\", \".join(str(livro) for livro in self.livros)}'\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Biblioteca.__init__","title":"<code>__init__(nome)</code>","text":"<p>Inicializa a biblioteca com um nome.</p> <p>Args:</p> <pre><code>nome (str): O nome da biblioteca.\n</code></pre> Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>def __init__(self, nome):\n    \"\"\"\n    Inicializa a biblioteca com um nome.\n\n    Args:\n\n        nome (str): O nome da biblioteca.\n    \"\"\"\n    self.nome = nome\n    self.livros = []  # Livros podem existir independentemente da biblioteca\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Biblioteca.adicionar_livro","title":"<code>adicionar_livro(livro)</code>","text":"<p>Adiciona um livro \u00e0 biblioteca.</p> <p>Args:</p> <pre><code>livro (str): O t\u00edtulo do livro a ser adicionado.\n</code></pre> Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>def adicionar_livro(self, livro):\n    \"\"\"\n    Adiciona um livro \u00e0 biblioteca.\n\n    Args:\n\n        livro (str): O t\u00edtulo do livro a ser adicionado.\n    \"\"\"\n    self.livros.append(livro)\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Biblioteca.listar_livros","title":"<code>listar_livros()</code>","text":"<p>Lista todos os livros na biblioteca.</p> <p>Returns:</p> <pre><code>value (list): Lista de livros na biblioteca.\n</code></pre> Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>def listar_livros(self):\n    \"\"\"\n    Lista todos os livros na biblioteca.\n\n    Returns:\n\n        value (list): Lista de livros na biblioteca.\n    \"\"\"\n    return f'Livros na biblioteca {self.nome}: {\", \".join(str(livro) for livro in self.livros)}'\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Carro","title":"<code>Carro</code>","text":"Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>class Carro:\n    def __init__(self, marca, modelo, tipo_motor):\n        \"\"\"\n        Inicializa o carro com uma marca, modelo e um motor.\n\n        Args:\n\n            marca (str): A marca do carro.\n            modelo (str): O modelo do carro.\n            tipo_motor (str): O tipo do motor do carro.\n        \"\"\"\n        self.marca = marca\n        self.modelo = modelo\n        self.motor = Motor(tipo_motor)  # Carro \"tem um\" Motor\n\n    def dirigir(self):\n        \"\"\"\n        Liga o motor e retorna uma mensagem indicando que o carro est\u00e1 pronto para dirigir.\n\n        Returns:\n\n            value (str): Mensagem indicando que o carro est\u00e1 pronto para dirigir.\n        \"\"\"\n        return f'{self.motor.ligar()} Carro {self.marca} {self.modelo} pronto para dirigir!'\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Carro.__init__","title":"<code>__init__(marca, modelo, tipo_motor)</code>","text":"<p>Inicializa o carro com uma marca, modelo e um motor.</p> <p>Args:</p> <pre><code>marca (str): A marca do carro.\nmodelo (str): O modelo do carro.\ntipo_motor (str): O tipo do motor do carro.\n</code></pre> Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>def __init__(self, marca, modelo, tipo_motor):\n    \"\"\"\n    Inicializa o carro com uma marca, modelo e um motor.\n\n    Args:\n\n        marca (str): A marca do carro.\n        modelo (str): O modelo do carro.\n        tipo_motor (str): O tipo do motor do carro.\n    \"\"\"\n    self.marca = marca\n    self.modelo = modelo\n    self.motor = Motor(tipo_motor)  # Carro \"tem um\" Motor\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Carro.dirigir","title":"<code>dirigir()</code>","text":"<p>Liga o motor e retorna uma mensagem indicando que o carro est\u00e1 pronto para dirigir.</p> <p>Returns:</p> <pre><code>value (str): Mensagem indicando que o carro est\u00e1 pronto para dirigir.\n</code></pre> Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>def dirigir(self):\n    \"\"\"\n    Liga o motor e retorna uma mensagem indicando que o carro est\u00e1 pronto para dirigir.\n\n    Returns:\n\n        value (str): Mensagem indicando que o carro est\u00e1 pronto para dirigir.\n    \"\"\"\n    return f'{self.motor.ligar()} Carro {self.marca} {self.modelo} pronto para dirigir!'\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Livro","title":"<code>Livro</code>","text":"Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>class Livro:\n    def __init__(self, titulo, autor):\n        \"\"\"\n        Inicializa o livro com um t\u00edtulo e um autor.\n\n        Args:\n\n            titulo (str): O t\u00edtulo do livro.\n            autor (str): O autor do livro.\n        \"\"\"\n        self.titulo = titulo\n        self.autor = autor\n\n    def __str__(self):\n        \"\"\"\n        Retorna uma representa\u00e7\u00e3o em string do livro.\n\n        Returns:\n\n            value (str): Representa\u00e7\u00e3o do livro.\n        \"\"\"\n        return f'{self.titulo} por {self.autor}'\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Livro.__init__","title":"<code>__init__(titulo, autor)</code>","text":"<p>Inicializa o livro com um t\u00edtulo e um autor.</p> <p>Args:</p> <pre><code>titulo (str): O t\u00edtulo do livro.\nautor (str): O autor do livro.\n</code></pre> Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>def __init__(self, titulo, autor):\n    \"\"\"\n    Inicializa o livro com um t\u00edtulo e um autor.\n\n    Args:\n\n        titulo (str): O t\u00edtulo do livro.\n        autor (str): O autor do livro.\n    \"\"\"\n    self.titulo = titulo\n    self.autor = autor\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Livro.__str__","title":"<code>__str__()</code>","text":"<p>Retorna uma representa\u00e7\u00e3o em string do livro.</p> <p>Returns:</p> <pre><code>value (str): Representa\u00e7\u00e3o do livro.\n</code></pre> Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Retorna uma representa\u00e7\u00e3o em string do livro.\n\n    Returns:\n\n        value (str): Representa\u00e7\u00e3o do livro.\n    \"\"\"\n    return f'{self.titulo} por {self.autor}'\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Motor","title":"<code>Motor</code>","text":"<p>Classe que representa um motor de um carro.</p> Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>class Motor:\n    \"\"\"\n    Classe que representa um motor de um carro.\n    \"\"\"\n\n    def __init__(self, tipo):\n        \"\"\"\n        Inicializa o motor com um tipo espec\u00edfico.\n\n        Args:\n            tipo (str): O tipo do motor (ex: \"V6\", \"V8\").\n        \"\"\"\n        self.tipo = tipo\n\n    def ligar(self):\n        \"\"\"\n        Liga o motor.\n\n        Returns:\n            value (str): Motor (self.tipo) ligado!\n        \"\"\"\n        return f'Motor {self.tipo} ligado!'\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Motor.__init__","title":"<code>__init__(tipo)</code>","text":"<p>Inicializa o motor com um tipo espec\u00edfico.</p> <p>Parameters:</p> Name Type Description Default <code>tipo</code> <code>str</code> <p>O tipo do motor (ex: \"V6\", \"V8\").</p> required Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>def __init__(self, tipo):\n    \"\"\"\n    Inicializa o motor com um tipo espec\u00edfico.\n\n    Args:\n        tipo (str): O tipo do motor (ex: \"V6\", \"V8\").\n    \"\"\"\n    self.tipo = tipo\n</code></pre>"},{"location":"content/modules/1/composicao_relacao/#conteudo.modulo_1.composicao_relacao.Motor.ligar","title":"<code>ligar()</code>","text":"<p>Liga o motor.</p> <p>Returns:</p> Name Type Description <code>value</code> <code>str</code> <p>Motor (self.tipo) ligado!</p> Source code in <code>conteudo/modulo_1/composicao_relacao.py</code> <pre><code>def ligar(self):\n    \"\"\"\n    Liga o motor.\n\n    Returns:\n        value (str): Motor (self.tipo) ligado!\n    \"\"\"\n    return f'Motor {self.tipo} ligado!'\n</code></pre>"},{"location":"content/modules/1/encapsulamento/","title":"Encapsulamento","text":""},{"location":"content/modules/1/encapsulamento/#conceitos-fundamentais","title":"Conceitos Fundamentais:","text":"<ul> <li> <p>Encapsulamento: Ocultar os detalhes internos de uma classe e expor apenas uma interface p\u00fablica para interagir com ela. Protege o estado interno do objeto de acessos e modifica\u00e7\u00f5es indesejadas.</p> </li> <li> <p>N\u00edveis de Acesso (Conven\u00e7\u00e3o em Python):</p> <ul> <li>P\u00fablico: Atributos e m\u00e9todos acess\u00edveis de qualquer lugar (padr\u00e3o).</li> <li>Protegido: Atributos e m\u00e9todos prefixados com _ (um underscore). Conven\u00e7\u00e3o para indicar que s\u00e3o para uso interno da classe ou suas subclasses, mas ainda acess\u00edveis.</li> <li>\"Privado\" (Name Mangling): Atributos e m\u00e9todos prefixados com __ (dois underscores). Python renomeia esses atributos para evitar conflitos de nome em subclasses. Ainda s\u00e3o acess\u00edveis, mas de forma mais \"complicada\", desincentivando o acesso direto.</li> </ul> </li> </ul>"},{"location":"content/modules/1/encapsulamento/#conteudo.modulo_1.encapsulamento.Encapsulamento","title":"<code>Encapsulamento</code>","text":"<p>Classe que demonstra o encapsulamento em Python. O encapsulamento \u00e9 uma pr\u00e1tica de programa\u00e7\u00e3o que restringe o acesso a certos componentes de um objeto, protegendo seus dados internos e m\u00e9todos de serem acessados diretamente de fora da classe.</p> Source code in <code>conteudo/modulo_1/encapsulamento.py</code> <pre><code>class Encapsulamento:\n    \"\"\"\n    Classe que demonstra o encapsulamento em Python.\n    O encapsulamento \u00e9 uma pr\u00e1tica de programa\u00e7\u00e3o que restringe o acesso a certos componentes de um objeto,\n    protegendo seus dados internos e m\u00e9todos de serem acessados diretamente de fora da classe.\n    \"\"\"\n\n    def __init__(self, publico, protegido, privado):\n        \"\"\"\n        M\u00e9todo construtor que inicializa os atributos publico, protegido e privado.\n\n        Args:\n\n            publico (str): Um atributo publico, n\u00e3o ser\u00e1 encapsulado.\n            protegido (str): Um atributo que ser\u00e1 encapsulado.\n            privado (str): Um atributo que ser\u00e1 encapsulado.\n        \"\"\"\n        # Atributos de inst\u00e2ncia\n        # Atributo p\u00fablico\n        self.publico = publico\n        # Atributo protegido\n        self._protegido = protegido\n        # Atributo privado\n        self.__privado = privado\n\n    def metodo_publico(self):\n        \"\"\"\n        M\u00e9todo para acessar o atributo p\u00fablico.\n        Este m\u00e9todo \u00e9 p\u00fablico e pode ser chamado de fora da classe.\n\n        Returns:\n\n            value (str): O valor do atributo p\u00fablico.\n        \"\"\"\n        return f'Valor p\u00fablico: {self.publico}'\n\n    def _metodo_protegido(self):\n        \"\"\"\n        M\u00e9todo getter para acessar o atributo protegido.\n\n        Returns:\n\n            value (str): O valor do atributo protegido.\n        \"\"\"\n        return f'Valor protegido: {self._protegido}'\n\n    def __metodo_privado(self):\n        \"\"\"\n        M\u00e9todo setter para modificar o atributo privado.\n\n        Returns:\n\n            value (int): O valor do atributo privado.\n        \"\"\"\n        return f'Valor privado: {self.__privado}'\n\n    # Propriedades (Getters e Setters)\n    @property\n    def valor_protegido(self):\n        return self._protegido\n\n    @property\n    def valor_privado(self):\n        return self.__privado\n\n    @valor_privado.setter\n    def valor_privado(self, valor):\n        if valor &gt; 0:\n            self.__privado = valor\n        else:\n            print('O valor do atributo privado deve ser maior que zero.')\n</code></pre>"},{"location":"content/modules/1/encapsulamento/#conteudo.modulo_1.encapsulamento.Encapsulamento.__init__","title":"<code>__init__(publico, protegido, privado)</code>","text":"<p>M\u00e9todo construtor que inicializa os atributos publico, protegido e privado.</p> <p>Args:</p> <pre><code>publico (str): Um atributo publico, n\u00e3o ser\u00e1 encapsulado.\nprotegido (str): Um atributo que ser\u00e1 encapsulado.\nprivado (str): Um atributo que ser\u00e1 encapsulado.\n</code></pre> Source code in <code>conteudo/modulo_1/encapsulamento.py</code> <pre><code>def __init__(self, publico, protegido, privado):\n    \"\"\"\n    M\u00e9todo construtor que inicializa os atributos publico, protegido e privado.\n\n    Args:\n\n        publico (str): Um atributo publico, n\u00e3o ser\u00e1 encapsulado.\n        protegido (str): Um atributo que ser\u00e1 encapsulado.\n        privado (str): Um atributo que ser\u00e1 encapsulado.\n    \"\"\"\n    # Atributos de inst\u00e2ncia\n    # Atributo p\u00fablico\n    self.publico = publico\n    # Atributo protegido\n    self._protegido = protegido\n    # Atributo privado\n    self.__privado = privado\n</code></pre>"},{"location":"content/modules/1/encapsulamento/#conteudo.modulo_1.encapsulamento.Encapsulamento.__metodo_privado","title":"<code>__metodo_privado()</code>","text":"<p>M\u00e9todo setter para modificar o atributo privado.</p> <p>Returns:</p> <pre><code>value (int): O valor do atributo privado.\n</code></pre> Source code in <code>conteudo/modulo_1/encapsulamento.py</code> <pre><code>def __metodo_privado(self):\n    \"\"\"\n    M\u00e9todo setter para modificar o atributo privado.\n\n    Returns:\n\n        value (int): O valor do atributo privado.\n    \"\"\"\n    return f'Valor privado: {self.__privado}'\n</code></pre>"},{"location":"content/modules/1/encapsulamento/#conteudo.modulo_1.encapsulamento.Encapsulamento.metodo_publico","title":"<code>metodo_publico()</code>","text":"<p>M\u00e9todo para acessar o atributo p\u00fablico. Este m\u00e9todo \u00e9 p\u00fablico e pode ser chamado de fora da classe.</p> <p>Returns:</p> <pre><code>value (str): O valor do atributo p\u00fablico.\n</code></pre> Source code in <code>conteudo/modulo_1/encapsulamento.py</code> <pre><code>def metodo_publico(self):\n    \"\"\"\n    M\u00e9todo para acessar o atributo p\u00fablico.\n    Este m\u00e9todo \u00e9 p\u00fablico e pode ser chamado de fora da classe.\n\n    Returns:\n\n        value (str): O valor do atributo p\u00fablico.\n    \"\"\"\n    return f'Valor p\u00fablico: {self.publico}'\n</code></pre>"},{"location":"content/modules/1/exemplo/","title":"Implementa\u00e7\u00e3o de um exemplo de projeto que utilizar\u00e1 os conceitos de:","text":"<ul> <li>Classe;</li> <li>Heran\u00e7a;</li> <li>Encapsulamento;</li> <li>Poliformismo;</li> <li>Abstra\u00e7\u00e3o;</li> <li>Composi\u00e7\u00e3o;</li> <li>Agrega\u00e7\u00e3o.</li> </ul>"},{"location":"content/modules/1/exemplo/#sistema-bancario-simples","title":"Sistema banc\u00e1rio simples:","text":"<ul> <li>Cliente: pessoa que possui uma conta banc\u00e1ria;</li> <li>Conta (classe abstrata): representa uma conta banc\u00e1ria gen\u00e9rica;</li> <li>ContaCorrente e ContaPoupan\u00e7a: herdam de Conta;</li> <li>Banco: classe que gerencia as contas banc\u00e1rias e clientes;</li> <li>Agencia: composi\u00e7\u00e3o dentro de Banco;</li> <li>Operacoes: depositar, sacar, ver saldo, etc.</li> </ul>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Agencia","title":"<code>Agencia</code>","text":"<p>Representa uma ag\u00eancia banc\u00e1ria.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>class Agencia:\n    \"\"\"\n    Representa uma ag\u00eancia banc\u00e1ria.\n    \"\"\"\n\n    def __init__(self, numero):\n        self.numero = numero\n        self.contas = []\n\n    def adicionar_conta(self, conta):\n        \"\"\"\n        Adiciona uma conta \u00e0 ag\u00eancia.\n        \"\"\"\n        self.contas.append(conta)\n        print(f'Conta {conta._numero} adicionada \u00e0 ag\u00eancia {self.numero}.')\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Agencia.adicionar_conta","title":"<code>adicionar_conta(conta)</code>","text":"<p>Adiciona uma conta \u00e0 ag\u00eancia.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>def adicionar_conta(self, conta):\n    \"\"\"\n    Adiciona uma conta \u00e0 ag\u00eancia.\n    \"\"\"\n    self.contas.append(conta)\n    print(f'Conta {conta._numero} adicionada \u00e0 ag\u00eancia {self.numero}.')\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Banco","title":"<code>Banco</code>","text":"<p>Representa um banco com ag\u00eancias e contas.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>class Banco:\n    \"\"\"\n    Representa um banco com ag\u00eancias e contas.\n    \"\"\"\n\n    def __init__(self, nome):\n        self.nome = nome\n        self.agencias = []\n        self.clientes = []\n\n    def adicionar_cliente(self, cliente):\n        \"\"\"\n        Adiciona um cliente ao banco.\n        \"\"\"\n        self.clientes.append(cliente)\n        print(f'Cliente {cliente.nome} adicionado ao banco {self.nome}.')\n\n    def adicionar_agencia(self, agencia):\n        \"\"\"\n        Adiciona uma ag\u00eancia ao banco.\n        \"\"\"\n        self.agencias.append(agencia)\n        print(f'Ag\u00eancia {agencia.numero} adicionada ao banco {self.nome}.')\n\n    def criar_conta_corrente(self, cliente, agencia_num, numero_conta, limite=500):\n        \"\"\"\n        Cria uma conta corrente para um cliente em uma ag\u00eancia.\n        \"\"\"\n        agencia = self._buscar_agencia(agencia_num)\n        if agencia:\n            conta = ContaCorrente(numero_conta, cliente, limite)\n            agencia.adicionar_conta(conta)\n            print(f'Conta corrente {numero_conta} criada para o cliente {cliente.nome}.')\n            return conta\n\n    def criar_conta_poupanca(self, cliente, agencia_num, numero_conta):\n        \"\"\"\n        Cria uma conta poupan\u00e7a para um cliente em uma ag\u00eancia.\n        \"\"\"\n        agencia = self._buscar_agencia(agencia_num)\n        if agencia:\n            conta = ContaPoupanca(numero_conta, cliente)\n            agencia.adicionar_conta(conta)\n            print(f'Conta poupan\u00e7a {numero_conta} criada para o cliente {cliente.nome}.')\n            return conta\n\n    def _buscar_agencia(self, numero):\n        \"\"\"\n        Busca uma ag\u00eancia pelo n\u00famero.\n        \"\"\"\n        for agencia in self.agencias:\n            if agencia.numero == numero:\n                return agencia\n        print(f'Ag\u00eancia {numero} n\u00e3o encontrada.')\n        return None\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Banco.adicionar_agencia","title":"<code>adicionar_agencia(agencia)</code>","text":"<p>Adiciona uma ag\u00eancia ao banco.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>def adicionar_agencia(self, agencia):\n    \"\"\"\n    Adiciona uma ag\u00eancia ao banco.\n    \"\"\"\n    self.agencias.append(agencia)\n    print(f'Ag\u00eancia {agencia.numero} adicionada ao banco {self.nome}.')\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Banco.adicionar_cliente","title":"<code>adicionar_cliente(cliente)</code>","text":"<p>Adiciona um cliente ao banco.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>def adicionar_cliente(self, cliente):\n    \"\"\"\n    Adiciona um cliente ao banco.\n    \"\"\"\n    self.clientes.append(cliente)\n    print(f'Cliente {cliente.nome} adicionado ao banco {self.nome}.')\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Banco.criar_conta_corrente","title":"<code>criar_conta_corrente(cliente, agencia_num, numero_conta, limite=500)</code>","text":"<p>Cria uma conta corrente para um cliente em uma ag\u00eancia.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>def criar_conta_corrente(self, cliente, agencia_num, numero_conta, limite=500):\n    \"\"\"\n    Cria uma conta corrente para um cliente em uma ag\u00eancia.\n    \"\"\"\n    agencia = self._buscar_agencia(agencia_num)\n    if agencia:\n        conta = ContaCorrente(numero_conta, cliente, limite)\n        agencia.adicionar_conta(conta)\n        print(f'Conta corrente {numero_conta} criada para o cliente {cliente.nome}.')\n        return conta\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Banco.criar_conta_poupanca","title":"<code>criar_conta_poupanca(cliente, agencia_num, numero_conta)</code>","text":"<p>Cria uma conta poupan\u00e7a para um cliente em uma ag\u00eancia.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>def criar_conta_poupanca(self, cliente, agencia_num, numero_conta):\n    \"\"\"\n    Cria uma conta poupan\u00e7a para um cliente em uma ag\u00eancia.\n    \"\"\"\n    agencia = self._buscar_agencia(agencia_num)\n    if agencia:\n        conta = ContaPoupanca(numero_conta, cliente)\n        agencia.adicionar_conta(conta)\n        print(f'Conta poupan\u00e7a {numero_conta} criada para o cliente {cliente.nome}.')\n        return conta\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Cliente","title":"<code>Cliente</code>","text":"<p>Representa um cliente do banco, com nome e CPF.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>class Cliente:\n    \"\"\"\n    Representa um cliente do banco, com nome e CPF.\n    \"\"\"\n\n    def __init__(self, nome, cpf):\n        self.nome = nome\n        self.cpf = cpf\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Conta","title":"<code>Conta</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Representa uma conta banc\u00e1ria gen\u00e9rica.</p> <p>Encapsulamento: _numero, _cliente, _saldo s\u00e3o atributos privados.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>class Conta(ABC):\n    \"\"\"\n    Representa uma conta banc\u00e1ria gen\u00e9rica.\n\n    Encapsulamento: _numero, _cliente, _saldo s\u00e3o atributos privados.\n    \"\"\"\n\n    def __init__(self, numero, cliente):\n        self._numero = numero\n        self._cliente = cliente\n        self._saldo = 0.0\n\n    @property\n    def saldo(self):\n        \"\"\"\n        Retorna o saldo da conta.\n        \"\"\"\n        return self._saldo\n\n    @abstractmethod\n    def sacar(self, valor):\n        \"\"\"\n        M\u00e9todo abstrato para sacar dinheiro da conta.\n        Deve ser implementado pelas subclasses.\n        \"\"\"\n        pass\n\n    def depositar(self, valor):\n        \"\"\"\n        Deposita um valor na conta.\n        \"\"\"\n        if valor &gt; 0:\n            self._saldo += valor\n            print(f'Dep\u00f3sito de R${valor:.2f} realizado com sucesso.')\n        else:\n            print('Valor de dep\u00f3sito inv\u00e1lido.')\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Conta.saldo","title":"<code>saldo</code>  <code>property</code>","text":"<p>Retorna o saldo da conta.</p>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Conta.depositar","title":"<code>depositar(valor)</code>","text":"<p>Deposita um valor na conta.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>def depositar(self, valor):\n    \"\"\"\n    Deposita um valor na conta.\n    \"\"\"\n    if valor &gt; 0:\n        self._saldo += valor\n        print(f'Dep\u00f3sito de R${valor:.2f} realizado com sucesso.')\n    else:\n        print('Valor de dep\u00f3sito inv\u00e1lido.')\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.Conta.sacar","title":"<code>sacar(valor)</code>  <code>abstractmethod</code>","text":"<p>M\u00e9todo abstrato para sacar dinheiro da conta. Deve ser implementado pelas subclasses.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>@abstractmethod\ndef sacar(self, valor):\n    \"\"\"\n    M\u00e9todo abstrato para sacar dinheiro da conta.\n    Deve ser implementado pelas subclasses.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.ContaCorrente","title":"<code>ContaCorrente</code>","text":"<p>               Bases: <code>Conta</code></p> <p>Representa uma conta corrente.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>class ContaCorrente(Conta):\n    \"\"\"\n    Representa uma conta corrente.\n    \"\"\"\n\n    def __init__(self, numero, cliente, limite=500):\n        super().__init__(numero, cliente)\n        self._limite = limite\n\n    def sacar(self, valor):\n        \"\"\"\n        Saque de dinheiro da conta corrente.\n        \"\"\"\n        if valor &lt;= self._saldo + self._limite:\n            self._saldo -= valor\n            print(f'Saque de R${valor:.2f} realizado com sucesso.')\n        else:\n            print('Saldo insuficiente.')\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.ContaCorrente.sacar","title":"<code>sacar(valor)</code>","text":"<p>Saque de dinheiro da conta corrente.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>def sacar(self, valor):\n    \"\"\"\n    Saque de dinheiro da conta corrente.\n    \"\"\"\n    if valor &lt;= self._saldo + self._limite:\n        self._saldo -= valor\n        print(f'Saque de R${valor:.2f} realizado com sucesso.')\n    else:\n        print('Saldo insuficiente.')\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.ContaPoupanca","title":"<code>ContaPoupanca</code>","text":"<p>               Bases: <code>Conta</code></p> <p>Representa uma conta poupan\u00e7a.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>class ContaPoupanca(Conta):\n    \"\"\"\n    Representa uma conta poupan\u00e7a.\n    \"\"\"\n\n    def sacar(self, valor):\n        \"\"\"\n        Saque de dinheiro da conta poupan\u00e7a.\n        \"\"\"\n        if valor &lt;= self._saldo:\n            self._saldo -= valor\n            print(f'Saque de R${valor:.2f} realizado com sucesso.')\n        else:\n            print('Saldo insuficiente.')\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.ContaPoupanca.sacar","title":"<code>sacar(valor)</code>","text":"<p>Saque de dinheiro da conta poupan\u00e7a.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>def sacar(self, valor):\n    \"\"\"\n    Saque de dinheiro da conta poupan\u00e7a.\n    \"\"\"\n    if valor &lt;= self._saldo:\n        self._saldo -= valor\n        print(f'Saque de R${valor:.2f} realizado com sucesso.')\n    else:\n        print('Saldo insuficiente.')\n</code></pre>"},{"location":"content/modules/1/exemplo/#conteudo.modulo_1.exemplo.exemplo_de_uso","title":"<code>exemplo_de_uso()</code>","text":"<p>Fun\u00e7\u00e3o principal para demonstrar o uso do sistema banc\u00e1rio.</p> Source code in <code>conteudo/modulo_1/exemplo.py</code> <pre><code>def exemplo_de_uso():\n    \"\"\"Fun\u00e7\u00e3o principal para demonstrar o uso do sistema banc\u00e1rio.\"\"\"\n    # Criando o banco\n    banco = Banco('Banco Exemplo')\n\n    # Adicionando clientes\n    cliente1 = Cliente('Alice', '123.456.789-00')\n    cliente2 = Cliente('Bob', '987.654.321-00')\n    banco.adicionar_cliente(cliente1)\n    banco.adicionar_cliente(cliente2)\n\n    # Adicionando ag\u00eancias\n    agencia1 = Agencia('001')\n    agencia2 = Agencia('002')\n    banco.adicionar_agencia(agencia1)\n    banco.adicionar_agencia(agencia2)\n\n    # Criando contas\n    conta_corrente_alice = banco.criar_conta_corrente(cliente1, '001', 'CC001', limite=1000)\n    conta_poupanca_bob = banco.criar_conta_poupanca(cliente2, '002', 'CP001')\n\n    # Opera\u00e7\u00f5es nas contas\n    conta_corrente_alice.depositar(500)\n    conta_corrente_alice.sacar(200)\n    print(f'Saldo da conta corrente de Alice: R${conta_corrente_alice.saldo:.2f}')\n\n    conta_poupanca_bob.depositar(300)\n    conta_poupanca_bob.sacar(100)\n    print(f'Saldo da conta poupan\u00e7a de Bob: R${conta_poupanca_bob.saldo:.2f}')\n</code></pre>"},{"location":"content/modules/1/heranca/","title":"Heran\u00e7a","text":""},{"location":"content/modules/1/heranca/#conceitos-fundamentais","title":"Conceitos Fundamentais:","text":"<ul> <li>Heran\u00e7a: Permite que uma classe (subclasse ou classe filha) herde atributos e m\u00e9todos de outra classe (superclasse ou classe pai). Modela a rela\u00e7\u00e3o \"\u00e9 um tipo de\".</li> <li>Sobrescrita de M\u00e9todos (Method Overriding): Uma subclasse pode fornecer sua pr\u00f3pria implementa\u00e7\u00e3o de um m\u00e9todo j\u00e1 definido na superclasse.</li> <li>super(): Fun\u00e7\u00e3o usada para chamar m\u00e9todos da superclasse a partir da subclasse.</li> <li>Heran\u00e7a M\u00faltipla: Uma classe pode herdar de m\u00faltiplas superclasses.</li> <li>MRO (Method Resolution Order): A ordem em que o Python procura m\u00e9todos em uma hierarquia de heran\u00e7a m\u00faltipla.</li> </ul>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Animal","title":"<code>Animal</code>","text":"<p>Classe base para representar um animal. Cont\u00e9m m\u00e9todos e atributos comuns a todos os animais.</p> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>class Animal:\n    \"\"\"\n    Classe base para representar um animal.\n    Cont\u00e9m m\u00e9todos e atributos comuns a todos os animais.\n    \"\"\"\n\n    def __init__(self, nome):\n        \"\"\"\n        M\u00e9todo construtor que inicializa o nome do animal.\n\n        Args:\n\n            nome (str): Nome do animal.\n        \"\"\"\n        self.nome = nome\n\n    def fazer_som(self):\n        \"\"\"\n        M\u00e9todo que deve ser implementado pelas subclasses para fazer um som espec\u00edfico.\n\n        Returns:\n\n            value (str): Som do animal.\n        \"\"\"\n        raise NotImplementedError('Subclasses devem implementar este m\u00e9todo.')\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Animal.__init__","title":"<code>__init__(nome)</code>","text":"<p>M\u00e9todo construtor que inicializa o nome do animal.</p> <p>Args:</p> <pre><code>nome (str): Nome do animal.\n</code></pre> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>def __init__(self, nome):\n    \"\"\"\n    M\u00e9todo construtor que inicializa o nome do animal.\n\n    Args:\n\n        nome (str): Nome do animal.\n    \"\"\"\n    self.nome = nome\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Animal.fazer_som","title":"<code>fazer_som()</code>","text":"<p>M\u00e9todo que deve ser implementado pelas subclasses para fazer um som espec\u00edfico.</p> <p>Returns:</p> <pre><code>value (str): Som do animal.\n</code></pre> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>def fazer_som(self):\n    \"\"\"\n    M\u00e9todo que deve ser implementado pelas subclasses para fazer um som espec\u00edfico.\n\n    Returns:\n\n        value (str): Som do animal.\n    \"\"\"\n    raise NotImplementedError('Subclasses devem implementar este m\u00e9todo.')\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Cachorro","title":"<code>Cachorro</code>","text":"<p>               Bases: <code>Animal</code></p> <p>Classe que representa um cachorro, herdando da classe Animal. Implementa o m\u00e9todo fazer_som para retornar o som espec\u00edfico de um cachorro.</p> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>class Cachorro(Animal):\n    \"\"\"\n    Classe que representa um cachorro, herdando da classe Animal.\n    Implementa o m\u00e9todo fazer_som para retornar o som espec\u00edfico de um cachorro.\n    \"\"\"\n\n    def __init__(self, nome, raca):\n        \"\"\"\n        M\u00e9todo construtor que inicializa o nome do cachorro.\n\n        Args:\n\n            nome (str): Nome do cachorro.\n        \"\"\"\n        super().__init__(nome)\n        self.raca = raca\n\n    def fazer_som(self):  # Sobrescrever o m\u00e9todo da classe pai\n        \"\"\"\n        M\u00e9todo que retorna o som do cachorro.\n\n        Returns:\n\n            value (str): Som do cachorro.\n        \"\"\"\n        return f'{self.nome} late: Au Au'\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Cachorro.__init__","title":"<code>__init__(nome, raca)</code>","text":"<p>M\u00e9todo construtor que inicializa o nome do cachorro.</p> <p>Args:</p> <pre><code>nome (str): Nome do cachorro.\n</code></pre> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>def __init__(self, nome, raca):\n    \"\"\"\n    M\u00e9todo construtor que inicializa o nome do cachorro.\n\n    Args:\n\n        nome (str): Nome do cachorro.\n    \"\"\"\n    super().__init__(nome)\n    self.raca = raca\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Cachorro.fazer_som","title":"<code>fazer_som()</code>","text":"<p>M\u00e9todo que retorna o som do cachorro.</p> <p>Returns:</p> <pre><code>value (str): Som do cachorro.\n</code></pre> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>def fazer_som(self):  # Sobrescrever o m\u00e9todo da classe pai\n    \"\"\"\n    M\u00e9todo que retorna o som do cachorro.\n\n    Returns:\n\n        value (str): Som do cachorro.\n    \"\"\"\n    return f'{self.nome} late: Au Au'\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Gato","title":"<code>Gato</code>","text":"<p>               Bases: <code>Animal</code></p> <p>Classe que representa um gato, herdando da classe Animal. Implementa o m\u00e9todo fazer_som para retornar o som espec\u00edfico de um gato.</p> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>class Gato(Animal):\n    \"\"\"\n    Classe que representa um gato, herdando da classe Animal.\n    Implementa o m\u00e9todo fazer_som para retornar o som espec\u00edfico de um gato.\n    \"\"\"\n\n    def fazer_som(self):\n        \"\"\"\n        M\u00e9todo que retorna o som do gato.\n\n        Returns:\n\n            value (str): Som do gato.\n        \"\"\"\n        return f'{self.nome} mia: Miau Miau'\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Gato.fazer_som","title":"<code>fazer_som()</code>","text":"<p>M\u00e9todo que retorna o som do gato.</p> <p>Returns:</p> <pre><code>value (str): Som do gato.\n</code></pre> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>def fazer_som(self):\n    \"\"\"\n    M\u00e9todo que retorna o som do gato.\n\n    Returns:\n\n        value (str): Som do gato.\n    \"\"\"\n    return f'{self.nome} mia: Miau Miau'\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Nada","title":"<code>Nada</code>","text":"<p>Classe que representa a capacidade de nadar. Esta classe pode ser usada como mixin para adicionar comportamento de nata\u00e7\u00e3o a outras classes.</p> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>class Nada:\n    \"\"\"\n    Classe que representa a capacidade de nadar.\n    Esta classe pode ser usada como mixin para adicionar comportamento de nata\u00e7\u00e3o a outras classes.\n    \"\"\"\n\n    @staticmethod\n    def nadar():\n        \"\"\"\n        M\u00e9todo que retorna uma mensagem indicando que o animal pode nadar.\n\n        Returns:\n\n            value (str): Mensagem de nata\u00e7\u00e3o.\n        \"\"\"\n        return 'Este animal pode nadar.'\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Nada.nadar","title":"<code>nadar()</code>  <code>staticmethod</code>","text":"<p>M\u00e9todo que retorna uma mensagem indicando que o animal pode nadar.</p> <p>Returns:</p> <pre><code>value (str): Mensagem de nata\u00e7\u00e3o.\n</code></pre> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>@staticmethod\ndef nadar():\n    \"\"\"\n    M\u00e9todo que retorna uma mensagem indicando que o animal pode nadar.\n\n    Returns:\n\n        value (str): Mensagem de nata\u00e7\u00e3o.\n    \"\"\"\n    return 'Este animal pode nadar.'\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Pato","title":"<code>Pato</code>","text":"<p>               Bases: <code>Animal</code>, <code>Voa</code>, <code>Nada</code></p> <p>Classe que representa um pato, herdando da classe Animal e mixins Voa e Nada. Implementa o m\u00e9todo fazer_som para retornar o som espec\u00edfico de um pato.</p> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>class Pato(Animal, Voa, Nada):\n    \"\"\"\n    Classe que representa um pato, herdando da classe Animal e mixins Voa e Nada.\n    Implementa o m\u00e9todo fazer_som para retornar o som espec\u00edfico de um pato.\n    \"\"\"\n\n    def __init__(self, nome):\n        \"\"\"\n        M\u00e9todo construtor que inicializa o nome do pato.\n\n        Args:\n\n            nome (str): Nome do pato.\n        \"\"\"\n        super().__init__(nome)  # Chama o construtor da primeira superclasse\n        # no MRO que tenha __init__\n\n    def fazer_som(self):\n        \"\"\"\n        M\u00e9todo que retorna o som do pato.\n\n        Returns:\n\n            value (str): Som do pato.\n        \"\"\"\n        return f'{self.nome} grasna: Quack Quack'\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Pato.__init__","title":"<code>__init__(nome)</code>","text":"<p>M\u00e9todo construtor que inicializa o nome do pato.</p> <p>Args:</p> <pre><code>nome (str): Nome do pato.\n</code></pre> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>def __init__(self, nome):\n    \"\"\"\n    M\u00e9todo construtor que inicializa o nome do pato.\n\n    Args:\n\n        nome (str): Nome do pato.\n    \"\"\"\n    super().__init__(nome)  # Chama o construtor da primeira superclasse\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Pato.fazer_som","title":"<code>fazer_som()</code>","text":"<p>M\u00e9todo que retorna o som do pato.</p> <p>Returns:</p> <pre><code>value (str): Som do pato.\n</code></pre> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>def fazer_som(self):\n    \"\"\"\n    M\u00e9todo que retorna o som do pato.\n\n    Returns:\n\n        value (str): Som do pato.\n    \"\"\"\n    return f'{self.nome} grasna: Quack Quack'\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Voa","title":"<code>Voa</code>","text":"<p>Classe que representa a capacidade de voar. Esta classe pode ser usada como mixin para adicionar comportamento de voo a outras classes.</p> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>class Voa:\n    \"\"\"\n    Classe que representa a capacidade de voar.\n    Esta classe pode ser usada como mixin para adicionar comportamento de voo a outras classes.\n    \"\"\"\n\n    @staticmethod\n    def voar():\n        \"\"\"\n        M\u00e9todo que retorna uma mensagem indicando que o animal pode voar.\n\n        Returns:\n\n            value (str): Mensagem de voo.\n        \"\"\"\n        return 'Este animal pode voar.'\n</code></pre>"},{"location":"content/modules/1/heranca/#conteudo.modulo_1.heranca.Voa.voar","title":"<code>voar()</code>  <code>staticmethod</code>","text":"<p>M\u00e9todo que retorna uma mensagem indicando que o animal pode voar.</p> <p>Returns:</p> <pre><code>value (str): Mensagem de voo.\n</code></pre> Source code in <code>conteudo/modulo_1/heranca.py</code> <pre><code>@staticmethod\ndef voar():\n    \"\"\"\n    M\u00e9todo que retorna uma mensagem indicando que o animal pode voar.\n\n    Returns:\n\n        value (str): Mensagem de voo.\n    \"\"\"\n    return 'Este animal pode voar.'\n</code></pre>"},{"location":"content/modules/1/polimorfismo/","title":"Polimorfismo e Abstra\u00e7\u00e3o","text":""},{"location":"content/modules/1/polimorfismo/#conceitos-fundamentais","title":"Conceitos Fundamentais:","text":"<ul> <li>Polimorfismo: \"Muitas formas\". Capacidade de objetos de diferentes classes de responder ao mesmo m\u00e9todo de maneira diferente, mas de uma forma que \u00e9 consistente com a sua pr\u00f3pria classe. Em Python, \u00e9 largamente suportado por Duck Typing (\"Se anda como um pato e quacks como um pato, ent\u00e3o \u00e9 um pato\").</li> <li>Abstra\u00e7\u00e3o: Focar no essencial e ignorar os detalhes irrelevantes. Em POO, envolve criar classes que representam conceitos gerais, definindo uma interface comum sem se preocupar com as implementa\u00e7\u00f5es espec\u00edficas.</li> <li>Classes Abstratas: Classes que n\u00e3o podem ser instanciadas diretamente e que cont\u00eam um ou mais m\u00e9todos abstratos (m\u00e9todos sem implementa\u00e7\u00e3o). For\u00e7am subclasses a fornecerem a implementa\u00e7\u00e3o.</li> <li>Interfaces (Protocolos em Python): Um contrato que define um conjunto de m\u00e9todos que uma classe deve implementar. Em Python, geralmente s\u00e3o impl\u00edcitas via Duck Typing ou expl\u00edcitas via typing.Protocol ou abc.ABC.</li> </ul>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Cachorro","title":"<code>Cachorro</code>","text":"<p>Classe que representa um cachorro. Implementa o m\u00e9todo fazer_som para retornar o som espec\u00edfico de um cachorro.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>class Cachorro:\n    \"\"\"\n    Classe que representa um cachorro.\n    Implementa o m\u00e9todo fazer_som para retornar o som espec\u00edfico de um cachorro.\n    \"\"\"\n\n    @staticmethod\n    def fazer_som():\n        \"\"\"\n        M\u00e9todo que retorna o som do cachorro.\n\n        Returns:\n            value (str): Som do cachorro.\n        \"\"\"\n        return 'Au Au'\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Cachorro.fazer_som","title":"<code>fazer_som()</code>  <code>staticmethod</code>","text":"<p>M\u00e9todo que retorna o som do cachorro.</p> <p>Returns:</p> Name Type Description <code>value</code> <code>str</code> <p>Som do cachorro.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>@staticmethod\ndef fazer_som():\n    \"\"\"\n    M\u00e9todo que retorna o som do cachorro.\n\n    Returns:\n        value (str): Som do cachorro.\n    \"\"\"\n    return 'Au Au'\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Circulo","title":"<code>Circulo</code>","text":"<p>               Bases: <code>Forma</code></p> <p>Classe que representa um c\u00edrculo, herdando da classe Forma. Implementa os m\u00e9todos calcular_area e calcular_perimetro.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>class Circulo(Forma):\n    \"\"\"\n    Classe que representa um c\u00edrculo, herdando da classe Forma.\n    Implementa os m\u00e9todos calcular_area e calcular_perimetro.\n    \"\"\"\n\n    def __init__(self, raio):\n        \"\"\"\n        M\u00e9todo construtor que inicializa o raio do c\u00edrculo.\n\n        Args:\n            raio (float): Raio do c\u00edrculo.\n        \"\"\"\n        self.raio = raio\n\n    def calcular_area(self):\n        \"\"\"\n        M\u00e9todo que calcula a \u00e1rea do c\u00edrculo.\n\n        Returns:\n            value (float): \u00c1rea do c\u00edrculo.\n        \"\"\"\n        return 3.14 * (self.raio**2)\n\n    def calcular_perimetro(self):\n        \"\"\"\n        M\u00e9todo que calcula o per\u00edmetro do c\u00edrculo.\n\n        Returns:\n            value (float): Per\u00edmetro do c\u00edrculo.\n        \"\"\"\n        return 2 * 3.14 * self.raio\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Circulo.__init__","title":"<code>__init__(raio)</code>","text":"<p>M\u00e9todo construtor que inicializa o raio do c\u00edrculo.</p> <p>Parameters:</p> Name Type Description Default <code>raio</code> <code>float</code> <p>Raio do c\u00edrculo.</p> required Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>def __init__(self, raio):\n    \"\"\"\n    M\u00e9todo construtor que inicializa o raio do c\u00edrculo.\n\n    Args:\n        raio (float): Raio do c\u00edrculo.\n    \"\"\"\n    self.raio = raio\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Circulo.calcular_area","title":"<code>calcular_area()</code>","text":"<p>M\u00e9todo que calcula a \u00e1rea do c\u00edrculo.</p> <p>Returns:</p> Name Type Description <code>value</code> <code>float</code> <p>\u00c1rea do c\u00edrculo.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>def calcular_area(self):\n    \"\"\"\n    M\u00e9todo que calcula a \u00e1rea do c\u00edrculo.\n\n    Returns:\n        value (float): \u00c1rea do c\u00edrculo.\n    \"\"\"\n    return 3.14 * (self.raio**2)\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Circulo.calcular_perimetro","title":"<code>calcular_perimetro()</code>","text":"<p>M\u00e9todo que calcula o per\u00edmetro do c\u00edrculo.</p> <p>Returns:</p> Name Type Description <code>value</code> <code>float</code> <p>Per\u00edmetro do c\u00edrculo.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>def calcular_perimetro(self):\n    \"\"\"\n    M\u00e9todo que calcula o per\u00edmetro do c\u00edrculo.\n\n    Returns:\n        value (float): Per\u00edmetro do c\u00edrculo.\n    \"\"\"\n    return 2 * 3.14 * self.raio\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Forma","title":"<code>Forma</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Classe abstrata que representa uma forma geom\u00e9trica. Cont\u00e9m um m\u00e9todo abstrato calcular_area que deve ser implementado pelas subclasses.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>class Forma(ABC):\n    \"\"\"\n    Classe abstrata que representa uma forma geom\u00e9trica.\n    Cont\u00e9m um m\u00e9todo abstrato calcular_area que deve ser implementado pelas subclasses.\n    \"\"\"\n\n    @abstractmethod\n    def calcular_area():\n        \"\"\"\n        M\u00e9todo abstrato que deve ser implementado pelas subclasses para calcular a \u00e1rea da forma.\n\n        Returns:\n            value (float): \u00c1rea da forma.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def calcular_perimetro():\n        \"\"\"\n        M\u00e9todo abstrato que deve ser implementado pelas subclasses para calcular o per\u00edmetro da forma.\n\n        Returns:\n            value (float): Per\u00edmetro da forma.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def obter_nome():\n        \"\"\"\n        M\u00e9todo que retorna o nome da forma.\n\n        Returns:\n            value (float): Nome da forma.\n        \"\"\"\n        return 'Forma Geom\u00e9trica'\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Forma.calcular_area","title":"<code>calcular_area()</code>  <code>abstractmethod</code>","text":"<p>M\u00e9todo abstrato que deve ser implementado pelas subclasses para calcular a \u00e1rea da forma.</p> <p>Returns:</p> Name Type Description <code>value</code> <code>float</code> <p>\u00c1rea da forma.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>@abstractmethod\ndef calcular_area():\n    \"\"\"\n    M\u00e9todo abstrato que deve ser implementado pelas subclasses para calcular a \u00e1rea da forma.\n\n    Returns:\n        value (float): \u00c1rea da forma.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Forma.calcular_perimetro","title":"<code>calcular_perimetro()</code>  <code>abstractmethod</code>","text":"<p>M\u00e9todo abstrato que deve ser implementado pelas subclasses para calcular o per\u00edmetro da forma.</p> <p>Returns:</p> Name Type Description <code>value</code> <code>float</code> <p>Per\u00edmetro da forma.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>@abstractmethod\ndef calcular_perimetro():\n    \"\"\"\n    M\u00e9todo abstrato que deve ser implementado pelas subclasses para calcular o per\u00edmetro da forma.\n\n    Returns:\n        value (float): Per\u00edmetro da forma.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Forma.obter_nome","title":"<code>obter_nome()</code>  <code>abstractmethod</code>","text":"<p>M\u00e9todo que retorna o nome da forma.</p> <p>Returns:</p> Name Type Description <code>value</code> <code>float</code> <p>Nome da forma.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>@abstractmethod\ndef obter_nome():\n    \"\"\"\n    M\u00e9todo que retorna o nome da forma.\n\n    Returns:\n        value (float): Nome da forma.\n    \"\"\"\n    return 'Forma Geom\u00e9trica'\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Pato","title":"<code>Pato</code>","text":"<p>Classe que representa um pato. Implementa o m\u00e9todo fazer_som para retornar o som espec\u00edfico de um pato.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>class Pato:\n    \"\"\"\n    Classe que representa um pato.\n    Implementa o m\u00e9todo fazer_som para retornar o som espec\u00edfico de um pato.\n    \"\"\"\n\n    @staticmethod\n    def fazer_som():\n        \"\"\"\n        M\u00e9todo que retorna o som do pato.\n\n        Returns:\n            value (str): Som do pato.\n        \"\"\"\n        return 'Quack Quack'\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.Pato.fazer_som","title":"<code>fazer_som()</code>  <code>staticmethod</code>","text":"<p>M\u00e9todo que retorna o som do pato.</p> <p>Returns:</p> Name Type Description <code>value</code> <code>str</code> <p>Som do pato.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>@staticmethod\ndef fazer_som():\n    \"\"\"\n    M\u00e9todo que retorna o som do pato.\n\n    Returns:\n        value (str): Som do pato.\n    \"\"\"\n    return 'Quack Quack'\n</code></pre>"},{"location":"content/modules/1/polimorfismo/#conteudo.modulo_1.polimorfismo_abstracao.fazer_som_do_animal","title":"<code>fazer_som_do_animal(animal)</code>","text":"<p>Fun\u00e7\u00e3o que recebe um animal e retorna o som dele.</p> <p>Parameters:</p> Name Type Description Default <code>animal</code> <code>object</code> <p>Objeto que implementa o m\u00e9todo fazer_som.</p> required <p>Returns:</p> Name Type Description <code>value</code> <code>str</code> <p>Som do animal.</p> Source code in <code>conteudo/modulo_1/polimorfismo_abstracao.py</code> <pre><code>def fazer_som_do_animal(animal):\n    \"\"\"\n    Fun\u00e7\u00e3o que recebe um animal e retorna o som dele.\n\n    Args:\n        animal (object): Objeto que implementa o m\u00e9todo fazer_som.\n\n    Returns:\n        value (str): Som do animal.\n    \"\"\"\n    return animal.fazer_som()\n</code></pre>"},{"location":"content/modules/2/solid/","title":"Princ\u00edpios SOLID","text":""},{"location":"content/modules/2/solid/#conceitos-fundamentais","title":"Conceitos Fundamentais:","text":"<p>SOLID \u00e9 um acr\u00f4nimo que re\u00fane 5 princ\u00edpios da programa\u00e7\u00e3o orientada a objetos, introduzidos por Robert C. Martin (Uncle Bob). Eles ajudam a escrever c\u00f3digo limpo, flex\u00edvel e f\u00e1cil de manter.</p> <ul> <li>S (Single Responsibility Principle - SRP): Uma classe deve ter apenas uma raz\u00e3o para mudar. (Uma classe = uma responsabilidade \u00fanica).</li> <li>O (Open/Closed Principle - OCP): Entidades de software (classes, m\u00f3dulos, fun\u00e7\u00f5es, etc.) devem ser abertas para extens\u00e3o, mas fechadas para modifica\u00e7\u00e3o.</li> <li>L (Liskov Substitution Principle - LSP): Subtipos devem ser substitu\u00edveis por seus tipos base sem alterar a corretude do programa. (Objetos de uma superclasse devem poder ser substitu\u00eddos por objetos de suas subclasses sem quebrar o c\u00f3digo).</li> <li>I (Interface Segregation Principle - ISP): Clientes n\u00e3o devem ser for\u00e7ados a depender de interfaces que n\u00e3o utilizam. (Interfaces grandes e monol\u00edticas devem ser divididas em interfaces menores e mais espec\u00edficas).</li> <li>D (Dependency Inversion Principle - DIP): M\u00f3dulos de alto n\u00edvel n\u00e3o devem depender de m\u00f3dulos de baixo n\u00edvel. Ambos devem depender de abstra\u00e7\u00f5es. Abstra\u00e7\u00f5es n\u00e3o devem depender de detalhes. Detalhes devem depender de abstra\u00e7\u00f5es.</li> </ul> <ol> <li>SRP - Single Responsibility Principle (Princ\u00edpio da Responsabilidade \u00danica)     \"Uma classe deve ter uma \u00fanica responsabilidade. Apenas uma raz\u00e3o para mudar.\"     Teoria:         Cada classe deve ter uma \u00fanica responsabilidade clara.         Evita classes que fazem tudo e mais um pouco (God Objects).</li> </ol>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.BancoX","title":"<code>BancoX</code>","text":"<p>Classe que representa um banco, violando o DIP ao depender de uma implementa\u00e7\u00e3o concreta.</p> <p>Attributes:</p> Name Type Description <code>repositorio</code> <code>ContaRepository</code> <p>Uma inst\u00e2ncia do reposit\u00f3rio de contas.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class BancoX:\n    \"\"\"\n    Classe que representa um banco, violando o DIP ao depender de uma implementa\u00e7\u00e3o concreta.\n\n    Attributes:\n        repositorio (ContaRepository): Uma inst\u00e2ncia do reposit\u00f3rio de contas.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Inicializa uma nova inst\u00e2ncia da classe Banco.\n\n        Depende da classe concreta ContaRepository(), violando o DIP.\n        \"\"\"\n        self.repositorio = ContaRepository()\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.BancoX.__init__","title":"<code>__init__()</code>","text":"<p>Inicializa uma nova inst\u00e2ncia da classe Banco.</p> <p>Depende da classe concreta ContaRepository(), violando o DIP.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Inicializa uma nova inst\u00e2ncia da classe Banco.\n\n    Depende da classe concreta ContaRepository(), violando o DIP.\n    \"\"\"\n    self.repositorio = ContaRepository()\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.BancoY","title":"<code>BancoY</code>","text":"<p>Classe que representa um banco, respeitando o DIP ao depender de uma abstra\u00e7\u00e3o.</p> <p>Attributes:</p> Name Type Description <code>repositorio</code> <code>ContaRepository</code> <p>Uma inst\u00e2ncia de um reposit\u00f3rio de contas, que pode ser                            qualquer implementa\u00e7\u00e3o que siga a interface.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class BancoY:\n    \"\"\"\n    Classe que representa um banco, respeitando o DIP ao depender de uma abstra\u00e7\u00e3o.\n\n    Attributes:\n        repositorio (ContaRepository): Uma inst\u00e2ncia de um reposit\u00f3rio de contas, que pode ser\n                                       qualquer implementa\u00e7\u00e3o que siga a interface.\n    \"\"\"\n\n    def __init__(self, repositorio):\n        \"\"\"\n        Inicializa uma nova inst\u00e2ncia da classe Banco.\n\n        Args:\n            repositorio (object): Uma inst\u00e2ncia de um reposit\u00f3rio de contas, que deve ser uma\n                                  abstra\u00e7\u00e3o (interface).\n        \"\"\"\n        self.repositorio = repositorio  # \u2714 depende de abstra\u00e7\u00e3o\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.BancoY.__init__","title":"<code>__init__(repositorio)</code>","text":"<p>Inicializa uma nova inst\u00e2ncia da classe Banco.</p> <p>Parameters:</p> Name Type Description Default <code>repositorio</code> <code>object</code> <p>Uma inst\u00e2ncia de um reposit\u00f3rio de contas, que deve ser uma                   abstra\u00e7\u00e3o (interface).</p> required Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>def __init__(self, repositorio):\n    \"\"\"\n    Inicializa uma nova inst\u00e2ncia da classe Banco.\n\n    Args:\n        repositorio (object): Uma inst\u00e2ncia de um reposit\u00f3rio de contas, que deve ser uma\n                              abstra\u00e7\u00e3o (interface).\n    \"\"\"\n    self.repositorio = repositorio  # \u2714 depende de abstra\u00e7\u00e3o\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.Conta","title":"<code>Conta</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Classe abstrata que representa uma conta banc\u00e1ria com opera\u00e7\u00f5es b\u00e1sicas.</p> <p>Methods:</p> Name Description <code>sacar</code> <p>M\u00e9todo abstrato para realizar um saque.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class Conta(ABC):\n    \"\"\"\n    Classe abstrata que representa uma conta banc\u00e1ria com opera\u00e7\u00f5es b\u00e1sicas.\n\n    Methods:\n        sacar(self, valor): M\u00e9todo abstrato para realizar um saque.\n    \"\"\"\n\n    @abstractmethod\n    def sacar(self, valor):\n        \"\"\"\n        Realiza um saque na conta.\n\n        Args:\n            valor (float): O valor a ser sacado.\n\n        Raises:\n            NotImplementedError: Se o m\u00e9todo n\u00e3o for implementado na subclasse.\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.Conta.sacar","title":"<code>sacar(valor)</code>  <code>abstractmethod</code>","text":"<p>Realiza um saque na conta.</p> <p>Parameters:</p> Name Type Description Default <code>valor</code> <code>float</code> <p>O valor a ser sacado.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>Se o m\u00e9todo n\u00e3o for implementado na subclasse.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>@abstractmethod\ndef sacar(self, valor):\n    \"\"\"\n    Realiza um saque na conta.\n\n    Args:\n        valor (float): O valor a ser sacado.\n\n    Raises:\n        NotImplementedError: Se o m\u00e9todo n\u00e3o for implementado na subclasse.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.ContaCorrente","title":"<code>ContaCorrente</code>","text":"<p>               Bases: <code>Conta</code></p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class ContaCorrente(Conta):\n    def aplicar_juros(self):\n        \"\"\"\n        Tenta aplicar juros em uma conta corrente, o que n\u00e3o \u00e9 suportado.\n\n        Raises:\n            NotImplementedError: Sempre levantada, indicando que a opera\u00e7\u00e3o n\u00e3o \u00e9 suportada.\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.ContaCorrente.aplicar_juros","title":"<code>aplicar_juros()</code>","text":"<p>Tenta aplicar juros em uma conta corrente, o que n\u00e3o \u00e9 suportado.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>Sempre levantada, indicando que a opera\u00e7\u00e3o n\u00e3o \u00e9 suportada.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>def aplicar_juros(self):\n    \"\"\"\n    Tenta aplicar juros em uma conta corrente, o que n\u00e3o \u00e9 suportado.\n\n    Raises:\n        NotImplementedError: Sempre levantada, indicando que a opera\u00e7\u00e3o n\u00e3o \u00e9 suportada.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.ContaRepository","title":"<code>ContaRepository</code>","text":"Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class ContaRepository:\n    def salvar(self, conta):\n        \"\"\"\n        Salva as informa\u00e7\u00f5es da conta em um armazenamento persistente.\n\n        Args:\n            conta (ContaY): A inst\u00e2ncia da conta a ser salva.\n        \"\"\"\n\n        # salvar a conta em JSON, banco etc.\n        ...\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.ContaRepository.salvar","title":"<code>salvar(conta)</code>","text":"<p>Salva as informa\u00e7\u00f5es da conta em um armazenamento persistente.</p> <p>Parameters:</p> Name Type Description Default <code>conta</code> <code>ContaY</code> <p>A inst\u00e2ncia da conta a ser salva.</p> required Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>def salvar(self, conta):\n    \"\"\"\n    Salva as informa\u00e7\u00f5es da conta em um armazenamento persistente.\n\n    Args:\n        conta (ContaY): A inst\u00e2ncia da conta a ser salva.\n    \"\"\"\n\n    # salvar a conta em JSON, banco etc.\n    ...\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.ContaRestritaX","title":"<code>ContaRestritaX</code>","text":"<p>               Bases: <code>Conta</code></p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class ContaRestritaX(Conta):\n    @staticmethod\n    def sacar(valor):\n        \"\"\"\n        Tenta realizar um saque em uma conta restrita, o que sempre levanta uma exce\u00e7\u00e3o.\n\n        Args:\n            valor (float): O valor a ser sacado.\n\n        Raises:\n            Exception: Sempre levantada, indicando que saques n\u00e3o s\u00e3o permitidos.\n        \"\"\"\n        raise Exception('Contas restritas n\u00e3o podem sacar!')\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.ContaRestritaX.sacar","title":"<code>sacar(valor)</code>  <code>staticmethod</code>","text":"<p>Tenta realizar um saque em uma conta restrita, o que sempre levanta uma exce\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>valor</code> <code>float</code> <p>O valor a ser sacado.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>Sempre levantada, indicando que saques n\u00e3o s\u00e3o permitidos.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>@staticmethod\ndef sacar(valor):\n    \"\"\"\n    Tenta realizar um saque em uma conta restrita, o que sempre levanta uma exce\u00e7\u00e3o.\n\n    Args:\n        valor (float): O valor a ser sacado.\n\n    Raises:\n        Exception: Sempre levantada, indicando que saques n\u00e3o s\u00e3o permitidos.\n    \"\"\"\n    raise Exception('Contas restritas n\u00e3o podem sacar!')\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.ContaX","title":"<code>ContaX</code>","text":"<p>Classe que representa uma conta banc\u00e1ria, violando o SRP ao incluir l\u00f3gica de persist\u00eancia.</p> <p>Attributes:</p> Name Type Description <code>numero</code> <code>int</code> <p>O n\u00famero da conta.</p> <code>cliente</code> <code>str</code> <p>O nome do cliente associado \u00e0 conta.</p> <code>saldo</code> <code>float</code> <p>O saldo atual da conta.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class ContaX:\n    \"\"\"\n    Classe que representa uma conta banc\u00e1ria, violando o SRP ao incluir l\u00f3gica de persist\u00eancia.\n\n    Attributes:\n        numero (int): O n\u00famero da conta.\n        cliente (str): O nome do cliente associado \u00e0 conta.\n        saldo (float): O saldo atual da conta.\n    \"\"\"\n\n    def __init__(self, numero, cliente):\n        \"\"\"\n        Inicializa uma nova inst\u00e2ncia da classe Conta.\n\n        Args:\n            numero (int): O n\u00famero da conta.\n            cliente (str): O nome do cliente associado \u00e0 conta.\n        \"\"\"\n        self.numero = numero\n        self.cliente = cliente\n        self.saldo = 0\n\n    def salvar_no_arquivo(self):\n        \"\"\"\n        Salva as informa\u00e7\u00f5es da conta em um arquivo.\n\n        Este m\u00e9todo viola o SRP ao misturar a l\u00f3gica de persist\u00eancia com a l\u00f3gica da conta.\n        \"\"\"\n        # responsabilidade de persist\u00eancia misturada\n        ...\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.ContaX.__init__","title":"<code>__init__(numero, cliente)</code>","text":"<p>Inicializa uma nova inst\u00e2ncia da classe Conta.</p> <p>Parameters:</p> Name Type Description Default <code>numero</code> <code>int</code> <p>O n\u00famero da conta.</p> required <code>cliente</code> <code>str</code> <p>O nome do cliente associado \u00e0 conta.</p> required Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>def __init__(self, numero, cliente):\n    \"\"\"\n    Inicializa uma nova inst\u00e2ncia da classe Conta.\n\n    Args:\n        numero (int): O n\u00famero da conta.\n        cliente (str): O nome do cliente associado \u00e0 conta.\n    \"\"\"\n    self.numero = numero\n    self.cliente = cliente\n    self.saldo = 0\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.ContaX.salvar_no_arquivo","title":"<code>salvar_no_arquivo()</code>","text":"<p>Salva as informa\u00e7\u00f5es da conta em um arquivo.</p> <p>Este m\u00e9todo viola o SRP ao misturar a l\u00f3gica de persist\u00eancia com a l\u00f3gica da conta.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>def salvar_no_arquivo(self):\n    \"\"\"\n    Salva as informa\u00e7\u00f5es da conta em um arquivo.\n\n    Este m\u00e9todo viola o SRP ao misturar a l\u00f3gica de persist\u00eancia com a l\u00f3gica da conta.\n    \"\"\"\n    # responsabilidade de persist\u00eancia misturada\n    ...\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.ContaY","title":"<code>ContaY</code>","text":"<p>Classe que representa uma conta banc\u00e1ria, respeitando o SRP.</p> <p>Attributes:</p> Name Type Description <code>numero</code> <code>int</code> <p>O n\u00famero da conta.</p> <code>cliente</code> <code>str</code> <p>O nome do cliente associado \u00e0 conta.</p> <code>saldo</code> <code>float</code> <p>O saldo atual da conta.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class ContaY:\n    \"\"\"\n    Classe que representa uma conta banc\u00e1ria, respeitando o SRP.\n\n    Attributes:\n        numero (int): O n\u00famero da conta.\n        cliente (str): O nome do cliente associado \u00e0 conta.\n        saldo (float): O saldo atual da conta.\n    \"\"\"\n\n    def __init__(self, numero, cliente):\n        self.numero = numero\n        self.cliente = cliente\n        self.saldo = 0.0\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.Deposito","title":"<code>Deposito</code>","text":"<p>               Bases: <code>Operacao</code></p> <p>Classe que representa uma opera\u00e7\u00e3o de dep\u00f3sito.</p> <p>Attributes:</p> Name Type Description <code>saldo</code> <code>float</code> <p>O saldo atual da conta.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class Deposito(Operacao):\n    \"\"\"\n    Classe que representa uma opera\u00e7\u00e3o de dep\u00f3sito.\n\n    Attributes:\n        saldo (float): O saldo atual da conta.\n    \"\"\"\n\n    @staticmethod\n    def executar(conta, valor):\n        \"\"\"Executa a opera\u00e7\u00e3o de dep\u00f3sito.\"\"\"\n        conta.depositar(valor)\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.Deposito.executar","title":"<code>executar(conta, valor)</code>  <code>staticmethod</code>","text":"<p>Executa a opera\u00e7\u00e3o de dep\u00f3sito.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>@staticmethod\ndef executar(conta, valor):\n    \"\"\"Executa a opera\u00e7\u00e3o de dep\u00f3sito.\"\"\"\n    conta.depositar(valor)\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.Operacao","title":"<code>Operacao</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Classe abstrata que define uma opera\u00e7\u00e3o banc\u00e1ria.</p> <p>Methods:</p> Name Description <code>executar</code> <p>M\u00e9todo abstrato para executar a opera\u00e7\u00e3o.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class Operacao(ABC):\n    \"\"\"\n    Classe abstrata que define uma opera\u00e7\u00e3o banc\u00e1ria.\n\n    Methods:\n        executar(self, conta, valor): M\u00e9todo abstrato para executar a opera\u00e7\u00e3o.\n    \"\"\"\n\n    @abstractmethod\n    def executar(conta, valor):\n        \"\"\"\n        Executa a opera\u00e7\u00e3o banc\u00e1ria na conta especificada.\n\n        Args:\n            conta (Conta): A conta na qual a opera\u00e7\u00e3o ser\u00e1 realizada.\n            valor (float): O valor da opera\u00e7\u00e3o.\n\n        Raises:\n            NotImplementedError: Se o m\u00e9todo n\u00e3o for implementado na subclasse.\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.Operacao.executar","title":"<code>executar(conta, valor)</code>  <code>abstractmethod</code>","text":"<p>Executa a opera\u00e7\u00e3o banc\u00e1ria na conta especificada.</p> <p>Parameters:</p> Name Type Description Default <code>conta</code> <code>Conta</code> <p>A conta na qual a opera\u00e7\u00e3o ser\u00e1 realizada.</p> required <code>valor</code> <code>float</code> <p>O valor da opera\u00e7\u00e3o.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>Se o m\u00e9todo n\u00e3o for implementado na subclasse.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>@abstractmethod\ndef executar(conta, valor):\n    \"\"\"\n    Executa a opera\u00e7\u00e3o banc\u00e1ria na conta especificada.\n\n    Args:\n        conta (Conta): A conta na qual a opera\u00e7\u00e3o ser\u00e1 realizada.\n        valor (float): O valor da opera\u00e7\u00e3o.\n\n    Raises:\n        NotImplementedError: Se o m\u00e9todo n\u00e3o for implementado na subclasse.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.OperacoesBancarias","title":"<code>OperacoesBancarias</code>","text":"<p>Classe que executa opera\u00e7\u00f5es banc\u00e1rias, violando o OCP ao exigir modifica\u00e7\u00f5es para novas opera\u00e7\u00f5es.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class OperacoesBancarias:\n    \"\"\"\n    Classe que executa opera\u00e7\u00f5es banc\u00e1rias, violando o OCP ao exigir modifica\u00e7\u00f5es para novas opera\u00e7\u00f5es.\n    \"\"\"\n\n    @staticmethod\n    def executar(tipo, conta, valor):\n        \"\"\"\n        Executa uma opera\u00e7\u00e3o banc\u00e1ria na conta especificada.\n\n        Args:\n            tipo (str): O tipo de opera\u00e7\u00e3o (\"deposito\" ou \"saque\").\n            conta (Conta): A conta na qual a opera\u00e7\u00e3o ser\u00e1 realizada.\n            valor (float): O valor da opera\u00e7\u00e3o.\n\n        Raises:\n            Exception: Se o tipo de opera\u00e7\u00e3o n\u00e3o for suportado.\n        \"\"\"\n        if tipo == 'deposito':\n            conta.depositar(valor)\n        elif tipo == 'saque':\n            conta.sacar(valor)\n        else:\n            raise Exception('Tipo de opera\u00e7\u00e3o n\u00e3o suportado.')\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.OperacoesBancarias.executar","title":"<code>executar(tipo, conta, valor)</code>  <code>staticmethod</code>","text":"<p>Executa uma opera\u00e7\u00e3o banc\u00e1ria na conta especificada.</p> <p>Parameters:</p> Name Type Description Default <code>tipo</code> <code>str</code> <p>O tipo de opera\u00e7\u00e3o (\"deposito\" ou \"saque\").</p> required <code>conta</code> <code>Conta</code> <p>A conta na qual a opera\u00e7\u00e3o ser\u00e1 realizada.</p> required <code>valor</code> <code>float</code> <p>O valor da opera\u00e7\u00e3o.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>Se o tipo de opera\u00e7\u00e3o n\u00e3o for suportado.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>@staticmethod\ndef executar(tipo, conta, valor):\n    \"\"\"\n    Executa uma opera\u00e7\u00e3o banc\u00e1ria na conta especificada.\n\n    Args:\n        tipo (str): O tipo de opera\u00e7\u00e3o (\"deposito\" ou \"saque\").\n        conta (Conta): A conta na qual a opera\u00e7\u00e3o ser\u00e1 realizada.\n        valor (float): O valor da opera\u00e7\u00e3o.\n\n    Raises:\n        Exception: Se o tipo de opera\u00e7\u00e3o n\u00e3o for suportado.\n    \"\"\"\n    if tipo == 'deposito':\n        conta.depositar(valor)\n    elif tipo == 'saque':\n        conta.sacar(valor)\n    else:\n        raise Exception('Tipo de opera\u00e7\u00e3o n\u00e3o suportado.')\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.Rendavel","title":"<code>Rendavel</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Interface que define a capacidade de aplicar juros a uma conta.</p> <p>Methods:</p> Name Description <code>aplicar_juros</code> <p>M\u00e9todo abstrato para aplicar juros.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class Rendavel(ABC):\n    \"\"\"\n    Interface que define a capacidade de aplicar juros a uma conta.\n\n    Methods:\n        aplicar_juros(self): M\u00e9todo abstrato para aplicar juros.\n    \"\"\"\n\n    @abstractmethod\n    def aplicar_juros(self):\n        \"\"\"\n        Aplica juros \u00e0 conta.\n\n        Raises:\n            NotImplementedError: Se o m\u00e9todo n\u00e3o for implementado na subclasse.\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.Rendavel.aplicar_juros","title":"<code>aplicar_juros()</code>  <code>abstractmethod</code>","text":"<p>Aplica juros \u00e0 conta.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>Se o m\u00e9todo n\u00e3o for implementado na subclasse.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>@abstractmethod\ndef aplicar_juros(self):\n    \"\"\"\n    Aplica juros \u00e0 conta.\n\n    Raises:\n        NotImplementedError: Se o m\u00e9todo n\u00e3o for implementado na subclasse.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.Saque","title":"<code>Saque</code>","text":"<p>               Bases: <code>Operacao</code></p> <p>Classe que representa uma opera\u00e7\u00e3o de saque.</p> <p>Attributes:</p> Name Type Description <code>saldo</code> <code>float</code> <p>O saldo atual da conta.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>class Saque(Operacao):\n    \"\"\"\n    Classe que representa uma opera\u00e7\u00e3o de saque.\n\n    Attributes:\n        saldo (float): O saldo atual da conta.\n    \"\"\"\n\n    @staticmethod\n    def executar(conta, valor):\n        \"\"\"Executa a opera\u00e7\u00e3o de saque.\"\"\"\n        conta.sacar(valor)\n</code></pre>"},{"location":"content/modules/2/solid/#conteudo.modulo_2.solid.Saque.executar","title":"<code>executar(conta, valor)</code>  <code>staticmethod</code>","text":"<p>Executa a opera\u00e7\u00e3o de saque.</p> Source code in <code>conteudo/modulo_2/solid.py</code> <pre><code>@staticmethod\ndef executar(conta, valor):\n    \"\"\"Executa a opera\u00e7\u00e3o de saque.\"\"\"\n    conta.sacar(valor)\n</code></pre>"},{"location":"content/modules/2/example/banco/cli/","title":"CLI ou interface gr\u00e1fica","text":""},{"location":"content/modules/2/example/banco/cli/#script-de-exemplo-para-demonstrar-a-criacao-e-interacao-com-as-entidades-do-sistema-bancario","title":"Script de exemplo para demonstrar a cria\u00e7\u00e3o e intera\u00e7\u00e3o com as entidades do sistema banc\u00e1rio.","text":""},{"location":"content/modules/2/example/banco/cli/#este-script-executa-as-seguintes-acoes","title":"Este script executa as seguintes a\u00e7\u00f5es:","text":"<ul> <li>1 Cria uma inst\u00e2ncia de <code>RepositorioEmMemoria</code>.</li> <li>2 Cria um <code>Cliente</code>.</li> <li>3 Salva o cliente no reposit\u00f3rio.</li> <li>4 Cria uma <code>ContaCorrente</code> para o cliente.</li> <li>5 Salva a conta no reposit\u00f3rio.</li> <li>6 Realiza opera\u00e7\u00f5es de dep\u00f3sito e saque na conta.</li> <li>7 Imprime o saldo final da conta no console.</li> </ul> <p>\u00c9 um exemplo pr\u00e1tico de como as camadas de dom\u00ednio e infraestrutura podem ser utilizadas em um ponto de entrada da aplica\u00e7\u00e3o (neste caso, um simples script CLI).</p> <p><pre><code>from dominio.entidades import Cliente, ContaCorrente\nfrom infra.repositorio_memoria import RepositorioEmMemoria\n\nrepo = RepositorioEmMemoria()\n\n# Criar cliente\ncliente = Cliente(\"Maria\", \"123\")\nrepo.salvar_cliente(cliente)\n\n# Criar conta corrente\nconta = ContaCorrente(\"0001\", cliente, limite=1000)\nrepo.salvar_conta(conta)\n\n# Depositar e sacar\nconta.depositar(500)\nconta.sacar(200)\n\nprint(f\"Saldo atual: R${conta.saldo:.2f}\")\n</code></pre> </p>"},{"location":"content/modules/2/example/banco/dominio/entidades/","title":"Entidades: Conta, Cliente, ContaCorrente, ContaPoupanca","text":""},{"location":"content/modules/2/example/banco/dominio/entidades/#conteudo.modulo_2.exemplo.banco.dominio.entidades.Cliente","title":"<code>Cliente</code>","text":"<p>Representa um cliente do banco.</p> <p>Attributes:</p> Name Type Description <code>nome</code> <code>str</code> <p>Nome do cliente.</p> <code>cpf</code> <code>str</code> <p>CPF do cliente.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/entidades.py</code> <pre><code>class Cliente:\n    \"\"\"Representa um cliente do banco.\n\n    Attributes:\n        nome (str): Nome do cliente.\n        cpf (str): CPF do cliente.\n    \"\"\"\n\n    def __init__(self, nome: str, cpf: str):\n        self.nome = nome\n        self.cpf = cpf\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/entidades/#conteudo.modulo_2.exemplo.banco.dominio.entidades.Conta","title":"<code>Conta</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Classe abstrata base para tipos de conta banc\u00e1ria.</p> <p>Attributes:</p> Name Type Description <code>numero</code> <code>str</code> <p>N\u00famero da conta.</p> <code>cliente</code> <code>Cliente</code> <p>Cliente dono da conta.</p> <code>_saldo</code> <code>float</code> <p>Saldo da conta.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/entidades.py</code> <pre><code>class Conta(ABC):\n    \"\"\"Classe abstrata base para tipos de conta banc\u00e1ria.\n\n    Attributes:\n        numero (str): N\u00famero da conta.\n        cliente (Cliente): Cliente dono da conta.\n        _saldo (float): Saldo da conta.\n    \"\"\"\n\n    def __init__(self, numero: str, cliente: Cliente):\n        self.numero = numero\n        self.cliente = cliente\n        self._saldo = 0.0\n\n    @property\n    def saldo(self):\n        \"\"\"float: Retorna o saldo atual da conta.\"\"\"\n        return self._saldo\n\n    def depositar(self, valor: float):\n        \"\"\"Realiza um dep\u00f3sito na conta.\n\n        Args:\n            valor (float): Valor a ser depositado.\n        \"\"\"\n        if valor &gt; 0:\n            self._saldo += valor\n\n    @abstractmethod\n    def sacar(self, valor: float):\n        \"\"\"Realiza um saque da conta.\n\n        Args:\n            valor (float): Valor a ser sacado.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/entidades/#conteudo.modulo_2.exemplo.banco.dominio.entidades.Conta.saldo","title":"<code>saldo</code>  <code>property</code>","text":"<p>float: Retorna o saldo atual da conta.</p>"},{"location":"content/modules/2/example/banco/dominio/entidades/#conteudo.modulo_2.exemplo.banco.dominio.entidades.Conta.depositar","title":"<code>depositar(valor)</code>","text":"<p>Realiza um dep\u00f3sito na conta.</p> <p>Parameters:</p> Name Type Description Default <code>valor</code> <code>float</code> <p>Valor a ser depositado.</p> required Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/entidades.py</code> <pre><code>def depositar(self, valor: float):\n    \"\"\"Realiza um dep\u00f3sito na conta.\n\n    Args:\n        valor (float): Valor a ser depositado.\n    \"\"\"\n    if valor &gt; 0:\n        self._saldo += valor\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/entidades/#conteudo.modulo_2.exemplo.banco.dominio.entidades.Conta.sacar","title":"<code>sacar(valor)</code>  <code>abstractmethod</code>","text":"<p>Realiza um saque da conta.</p> <p>Parameters:</p> Name Type Description Default <code>valor</code> <code>float</code> <p>Valor a ser sacado.</p> required Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/entidades.py</code> <pre><code>@abstractmethod\ndef sacar(self, valor: float):\n    \"\"\"Realiza um saque da conta.\n\n    Args:\n        valor (float): Valor a ser sacado.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/entidades/#conteudo.modulo_2.exemplo.banco.dominio.entidades.ContaCorrente","title":"<code>ContaCorrente</code>","text":"<p>               Bases: <code>Conta</code></p> <p>Conta corrente com limite de saque.</p> <p>Attributes:</p> Name Type Description <code>_limite</code> <code>float</code> <p>Limite adicional para saque.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/entidades.py</code> <pre><code>class ContaCorrente(Conta):\n    \"\"\"Conta corrente com limite de saque.\n\n    Attributes:\n        _limite (float): Limite adicional para saque.\n    \"\"\"\n\n    def __init__(self, numero: str, cliente: Cliente, limite: float = 500):\n        super().__init__(numero, cliente)\n        self._limite = limite\n\n    def sacar(self, valor: float):\n        \"\"\"Realiza um saque com limite adicional.\n\n        Args:\n            valor (float): Valor a ser sacado.\n        \"\"\"\n        if valor &lt;= self._saldo + self._limite:\n            self._saldo -= valor\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/entidades/#conteudo.modulo_2.exemplo.banco.dominio.entidades.ContaCorrente.sacar","title":"<code>sacar(valor)</code>","text":"<p>Realiza um saque com limite adicional.</p> <p>Parameters:</p> Name Type Description Default <code>valor</code> <code>float</code> <p>Valor a ser sacado.</p> required Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/entidades.py</code> <pre><code>def sacar(self, valor: float):\n    \"\"\"Realiza um saque com limite adicional.\n\n    Args:\n        valor (float): Valor a ser sacado.\n    \"\"\"\n    if valor &lt;= self._saldo + self._limite:\n        self._saldo -= valor\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/entidades/#conteudo.modulo_2.exemplo.banco.dominio.entidades.ContaPoupanca","title":"<code>ContaPoupanca</code>","text":"<p>               Bases: <code>Conta</code></p> <p>Conta poupan\u00e7a sem limite de saque adicional.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/entidades.py</code> <pre><code>class ContaPoupanca(Conta):\n    \"\"\"Conta poupan\u00e7a sem limite de saque adicional.\"\"\"\n\n    def sacar(self, valor: float):\n        \"\"\"Realiza um saque se houver saldo suficiente.\n\n        Args:\n            valor (float): Valor a ser sacado.\n        \"\"\"\n        if valor &lt;= self._saldo:\n            self._saldo -= valor\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/entidades/#conteudo.modulo_2.exemplo.banco.dominio.entidades.ContaPoupanca.sacar","title":"<code>sacar(valor)</code>","text":"<p>Realiza um saque se houver saldo suficiente.</p> <p>Parameters:</p> Name Type Description Default <code>valor</code> <code>float</code> <p>Valor a ser sacado.</p> required Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/entidades.py</code> <pre><code>def sacar(self, valor: float):\n    \"\"\"Realiza um saque se houver saldo suficiente.\n\n    Args:\n        valor (float): Valor a ser sacado.\n    \"\"\"\n    if valor &lt;= self._saldo:\n        self._saldo -= valor\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/interfaces/","title":"Abstra\u00e7\u00f5es (repositorio, operacoes) -&gt; ContaRepositoryInterface, ClienteRepositoryInterface","text":""},{"location":"content/modules/2/example/banco/dominio/interfaces/#conteudo.modulo_2.exemplo.banco.dominio.interfaces.ClienteRepositoryInterface","title":"<code>ClienteRepositoryInterface</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Interface para opera\u00e7\u00f5es de persist\u00eancia de clientes.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/interfaces.py</code> <pre><code>class ClienteRepositoryInterface(ABC):\n    \"\"\"Interface para opera\u00e7\u00f5es de persist\u00eancia de clientes.\"\"\"\n\n    @abstractmethod\n    def salvar_cliente(self, cliente):\n        \"\"\"Salva um cliente no reposit\u00f3rio.\n\n        Args:\n            cliente (Cliente): Cliente a ser salvo.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def obter_cliente(self, cpf: str):\n        \"\"\"Obt\u00e9m um cliente pelo CPF.\n\n        Args:\n            cpf (str): CPF do cliente.\n\n        Returns:\n            Cliente (Cliente): Cliente correspondente.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/interfaces/#conteudo.modulo_2.exemplo.banco.dominio.interfaces.ClienteRepositoryInterface.obter_cliente","title":"<code>obter_cliente(cpf)</code>  <code>abstractmethod</code>","text":"<p>Obt\u00e9m um cliente pelo CPF.</p> <p>Parameters:</p> Name Type Description Default <code>cpf</code> <code>str</code> <p>CPF do cliente.</p> required <p>Returns:</p> Name Type Description <code>Cliente</code> <code>Cliente</code> <p>Cliente correspondente.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/interfaces.py</code> <pre><code>@abstractmethod\ndef obter_cliente(self, cpf: str):\n    \"\"\"Obt\u00e9m um cliente pelo CPF.\n\n    Args:\n        cpf (str): CPF do cliente.\n\n    Returns:\n        Cliente (Cliente): Cliente correspondente.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/interfaces/#conteudo.modulo_2.exemplo.banco.dominio.interfaces.ClienteRepositoryInterface.salvar_cliente","title":"<code>salvar_cliente(cliente)</code>  <code>abstractmethod</code>","text":"<p>Salva um cliente no reposit\u00f3rio.</p> <p>Parameters:</p> Name Type Description Default <code>cliente</code> <code>Cliente</code> <p>Cliente a ser salvo.</p> required Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/interfaces.py</code> <pre><code>@abstractmethod\ndef salvar_cliente(self, cliente):\n    \"\"\"Salva um cliente no reposit\u00f3rio.\n\n    Args:\n        cliente (Cliente): Cliente a ser salvo.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/interfaces/#conteudo.modulo_2.exemplo.banco.dominio.interfaces.ContaRepositoryInterface","title":"<code>ContaRepositoryInterface</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Interface para opera\u00e7\u00f5es de persist\u00eancia de contas.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/interfaces.py</code> <pre><code>class ContaRepositoryInterface(ABC):\n    \"\"\"Interface para opera\u00e7\u00f5es de persist\u00eancia de contas.\"\"\"\n\n    @abstractmethod\n    def salvar_conta(self, conta):\n        \"\"\"Salva uma conta no reposit\u00f3rio.\n\n        Args:\n            conta (Conta): Conta a ser salva.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def obter_conta(self, numero: str):\n        \"\"\"Obt\u00e9m uma conta pelo n\u00famero.\n\n        Args:\n            numero (str): N\u00famero da conta.\n\n        Returns:\n            Conta (Conta): Conta correspondente.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/interfaces/#conteudo.modulo_2.exemplo.banco.dominio.interfaces.ContaRepositoryInterface.obter_conta","title":"<code>obter_conta(numero)</code>  <code>abstractmethod</code>","text":"<p>Obt\u00e9m uma conta pelo n\u00famero.</p> <p>Parameters:</p> Name Type Description Default <code>numero</code> <code>str</code> <p>N\u00famero da conta.</p> required <p>Returns:</p> Name Type Description <code>Conta</code> <code>Conta</code> <p>Conta correspondente.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/interfaces.py</code> <pre><code>@abstractmethod\ndef obter_conta(self, numero: str):\n    \"\"\"Obt\u00e9m uma conta pelo n\u00famero.\n\n    Args:\n        numero (str): N\u00famero da conta.\n\n    Returns:\n        Conta (Conta): Conta correspondente.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"content/modules/2/example/banco/dominio/interfaces/#conteudo.modulo_2.exemplo.banco.dominio.interfaces.ContaRepositoryInterface.salvar_conta","title":"<code>salvar_conta(conta)</code>  <code>abstractmethod</code>","text":"<p>Salva uma conta no reposit\u00f3rio.</p> <p>Parameters:</p> Name Type Description Default <code>conta</code> <code>Conta</code> <p>Conta a ser salva.</p> required Source code in <code>conteudo/modulo_2/exemplo/banco/dominio/interfaces.py</code> <pre><code>@abstractmethod\ndef salvar_conta(self, conta):\n    \"\"\"Salva uma conta no reposit\u00f3rio.\n\n    Args:\n        conta (Conta): Conta a ser salva.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"content/modules/2/example/banco/infra/repo_memoria/","title":"Implementa\u00e7\u00f5es concretas","text":""},{"location":"content/modules/2/example/banco/infra/repo_memoria/#conteudo.modulo_2.exemplo.banco.infra.repositorio_memoria.RepositorioEmMemoria","title":"<code>RepositorioEmMemoria</code>","text":"<p>               Bases: <code>ContaRepositoryInterface</code>, <code>ClienteRepositoryInterface</code></p> <p>Implementa\u00e7\u00e3o de reposit\u00f3rio em mem\u00f3ria para clientes e contas.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/infra/repositorio_memoria.py</code> <pre><code>class RepositorioEmMemoria(ContaRepositoryInterface, ClienteRepositoryInterface):\n    \"\"\"Implementa\u00e7\u00e3o de reposit\u00f3rio em mem\u00f3ria para clientes e contas.\"\"\"\n\n    def __init__(self):\n        self.contas = {}\n        self.clientes = {}\n\n    def salvar_conta(self, conta):\n        \"\"\"Salva uma conta no dicion\u00e1rio interno.\"\"\"\n        self.contas[conta.numero] = conta\n\n    def obter_conta(self, numero):\n        \"\"\"Obt\u00e9m uma conta pelo n\u00famero.\"\"\"\n        return self.contas.get(numero)\n\n    def salvar_cliente(self, cliente):\n        \"\"\"Salva um cliente no dicion\u00e1rio interno.\"\"\"\n        self.clientes[cliente.cpf] = cliente\n\n    def obter_cliente(self, cpf):\n        \"\"\"Obt\u00e9m um cliente pelo CPF.\"\"\"\n        return self.clientes.get(cpf)\n</code></pre>"},{"location":"content/modules/2/example/banco/infra/repo_memoria/#conteudo.modulo_2.exemplo.banco.infra.repositorio_memoria.RepositorioEmMemoria.obter_cliente","title":"<code>obter_cliente(cpf)</code>","text":"<p>Obt\u00e9m um cliente pelo CPF.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/infra/repositorio_memoria.py</code> <pre><code>def obter_cliente(self, cpf):\n    \"\"\"Obt\u00e9m um cliente pelo CPF.\"\"\"\n    return self.clientes.get(cpf)\n</code></pre>"},{"location":"content/modules/2/example/banco/infra/repo_memoria/#conteudo.modulo_2.exemplo.banco.infra.repositorio_memoria.RepositorioEmMemoria.obter_conta","title":"<code>obter_conta(numero)</code>","text":"<p>Obt\u00e9m uma conta pelo n\u00famero.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/infra/repositorio_memoria.py</code> <pre><code>def obter_conta(self, numero):\n    \"\"\"Obt\u00e9m uma conta pelo n\u00famero.\"\"\"\n    return self.contas.get(numero)\n</code></pre>"},{"location":"content/modules/2/example/banco/infra/repo_memoria/#conteudo.modulo_2.exemplo.banco.infra.repositorio_memoria.RepositorioEmMemoria.salvar_cliente","title":"<code>salvar_cliente(cliente)</code>","text":"<p>Salva um cliente no dicion\u00e1rio interno.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/infra/repositorio_memoria.py</code> <pre><code>def salvar_cliente(self, cliente):\n    \"\"\"Salva um cliente no dicion\u00e1rio interno.\"\"\"\n    self.clientes[cliente.cpf] = cliente\n</code></pre>"},{"location":"content/modules/2/example/banco/infra/repo_memoria/#conteudo.modulo_2.exemplo.banco.infra.repositorio_memoria.RepositorioEmMemoria.salvar_conta","title":"<code>salvar_conta(conta)</code>","text":"<p>Salva uma conta no dicion\u00e1rio interno.</p> Source code in <code>conteudo/modulo_2/exemplo/banco/infra/repositorio_memoria.py</code> <pre><code>def salvar_conta(self, conta):\n    \"\"\"Salva uma conta no dicion\u00e1rio interno.\"\"\"\n    self.contas[conta.numero] = conta\n</code></pre>"},{"location":"content/modules/2/example/project/projeto/","title":"Princ\u00edpios SOLID aplicados sistema banc\u00e1rio:","text":"Princ\u00edpio Aplica\u00e7\u00e3o no projeto S - SRP <code>Conta</code> s\u00f3 cuida do saldo, <code>Repositorio</code> da persist\u00eancia O - OCP Pode adicionar <code>ContaInvestimento</code> sem mudar o c\u00f3digo antigo L - LSP <code>ContaCorrente</code> e <code>ContaPoupanca</code> substituem <code>Conta</code> sem quebrar I - ISP Separa\u00e7\u00e3o clara entre <code>ContaRepositoryInterface</code> e <code>ClienteRepositoryInterface</code> D - DIP <code>main.py</code> depende da interface, n\u00e3o da implementa\u00e7\u00e3o"},{"location":"content/modules/2/example/project/projeto/#estrutura-do-projeto","title":"Estrutura do projeto","text":"<pre><code>banco/\n\u251c\u2500\u2500 dominio/                     -&gt; L\u00f3gica de neg\u00f3cio\n\u2502   \u251c\u2500\u2500 entidades.py             -&gt; Entidades: Conta, Cliente, ContaCorrente, ContaPoupanca\n\u2502   \u2514\u2500\u2500 interfaces.py            -&gt; Abstra\u00e7\u00f5es (repositorio, operacoes)\n\u251c\u2500\u2500 infra/                       -&gt; Implementa\u00e7\u00f5es concretas\n\u2502   \u2514\u2500\u2500 repositorio_memoria.py   -&gt; Reposit\u00f3rio em mem\u00f3ria\n\u2514\u2500\u2500 principal.py                 -&gt; CLI ou interface\n</code></pre>"}]}